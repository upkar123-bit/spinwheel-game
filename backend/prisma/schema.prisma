// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------
// User model
// -------------------------
model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  coins        Int           @default(1000)
  createdAt    DateTime      @default(now())
  
  joins        Join[]
  spins        Spin[]
  transactions Transaction[]
  wheelsOwned  Wheel[]       @relation("WheelOwner")
  wheelsHosted Wheel[]       @relation("WheelHost")
}

// -------------------------
// Wheel model
// -------------------------
model Wheel {
  id          Int       @id @default(autoincrement())
  ownerId     Int
  owner       User      @relation("WheelOwner", fields: [ownerId], references: [id])
  hostId      Int
  host        User      @relation("WheelHost", fields: [hostId], references: [id])
  entry_fee   Int
  winnerPool  Int       @default(0)
  ownerPool   Int       @default(0)
  appPool     Int       @default(0)
  status      WheelStatus @default(PENDING)
  startsAt    DateTime?
  endsAt      DateTime?
  createdAt   DateTime  @default(now())

  joins       Join[]
  spins       Spin[]
  transactions Transaction[]
}

// -------------------------
// Join model
// -------------------------
model Join {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  wheelId      Int
  wheel        Wheel    @relation(fields: [wheelId], references: [id])
  joinedAt     DateTime @default(now())
  eliminatedAt DateTime?
}

// -------------------------
// Spin model
// -------------------------
model Spin {
  id        Int      @id @default(autoincrement())
  wheelId   Int
  wheel     Wheel    @relation(fields: [wheelId], references: [id])
  winnerId  Int
  winner    User     @relation(fields: [winnerId], references: [id])
  amount    Int
  createdAt DateTime @default(now())
}

// -------------------------
// Transaction model
// -------------------------
model Transaction {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  wheelId   Int
  wheel     Wheel    @relation(fields: [wheelId], references: [id])
  amount    Int
  kind      String
  meta      String?
  createdAt DateTime @default(now())
}

// -------------------------
// Wheel Status Enum
// -------------------------
enum WheelStatus {
  PENDING
  RUNNING
  FINISHED
  ABORTED
}

