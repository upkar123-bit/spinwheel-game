
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Wheel
 * 
 */
export type Wheel = $Result.DefaultSelection<Prisma.$WheelPayload>
/**
 * Model Join
 * 
 */
export type Join = $Result.DefaultSelection<Prisma.$JoinPayload>
/**
 * Model Spin
 * 
 */
export type Spin = $Result.DefaultSelection<Prisma.$SpinPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const WheelStatus: {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  FINISHED: 'FINISHED',
  ABORTED: 'ABORTED'
};

export type WheelStatus = (typeof WheelStatus)[keyof typeof WheelStatus]

}

export type WheelStatus = $Enums.WheelStatus

export const WheelStatus: typeof $Enums.WheelStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wheel`: Exposes CRUD operations for the **Wheel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wheels
    * const wheels = await prisma.wheel.findMany()
    * ```
    */
  get wheel(): Prisma.WheelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.join`: Exposes CRUD operations for the **Join** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Joins
    * const joins = await prisma.join.findMany()
    * ```
    */
  get join(): Prisma.JoinDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.spin`: Exposes CRUD operations for the **Spin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Spins
    * const spins = await prisma.spin.findMany()
    * ```
    */
  get spin(): Prisma.SpinDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Wheel: 'Wheel',
    Join: 'Join',
    Spin: 'Spin',
    Transaction: 'Transaction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "wheel" | "join" | "spin" | "transaction"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Wheel: {
        payload: Prisma.$WheelPayload<ExtArgs>
        fields: Prisma.WheelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WheelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WheelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload>
          }
          findFirst: {
            args: Prisma.WheelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WheelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload>
          }
          findMany: {
            args: Prisma.WheelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload>[]
          }
          create: {
            args: Prisma.WheelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload>
          }
          createMany: {
            args: Prisma.WheelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WheelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload>[]
          }
          delete: {
            args: Prisma.WheelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload>
          }
          update: {
            args: Prisma.WheelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload>
          }
          deleteMany: {
            args: Prisma.WheelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WheelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WheelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload>[]
          }
          upsert: {
            args: Prisma.WheelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WheelPayload>
          }
          aggregate: {
            args: Prisma.WheelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWheel>
          }
          groupBy: {
            args: Prisma.WheelGroupByArgs<ExtArgs>
            result: $Utils.Optional<WheelGroupByOutputType>[]
          }
          count: {
            args: Prisma.WheelCountArgs<ExtArgs>
            result: $Utils.Optional<WheelCountAggregateOutputType> | number
          }
        }
      }
      Join: {
        payload: Prisma.$JoinPayload<ExtArgs>
        fields: Prisma.JoinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JoinFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JoinFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload>
          }
          findFirst: {
            args: Prisma.JoinFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JoinFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload>
          }
          findMany: {
            args: Prisma.JoinFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload>[]
          }
          create: {
            args: Prisma.JoinCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload>
          }
          createMany: {
            args: Prisma.JoinCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JoinCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload>[]
          }
          delete: {
            args: Prisma.JoinDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload>
          }
          update: {
            args: Prisma.JoinUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload>
          }
          deleteMany: {
            args: Prisma.JoinDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JoinUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JoinUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload>[]
          }
          upsert: {
            args: Prisma.JoinUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoinPayload>
          }
          aggregate: {
            args: Prisma.JoinAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJoin>
          }
          groupBy: {
            args: Prisma.JoinGroupByArgs<ExtArgs>
            result: $Utils.Optional<JoinGroupByOutputType>[]
          }
          count: {
            args: Prisma.JoinCountArgs<ExtArgs>
            result: $Utils.Optional<JoinCountAggregateOutputType> | number
          }
        }
      }
      Spin: {
        payload: Prisma.$SpinPayload<ExtArgs>
        fields: Prisma.SpinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpinFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpinFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload>
          }
          findFirst: {
            args: Prisma.SpinFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpinFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload>
          }
          findMany: {
            args: Prisma.SpinFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload>[]
          }
          create: {
            args: Prisma.SpinCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload>
          }
          createMany: {
            args: Prisma.SpinCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpinCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload>[]
          }
          delete: {
            args: Prisma.SpinDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload>
          }
          update: {
            args: Prisma.SpinUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload>
          }
          deleteMany: {
            args: Prisma.SpinDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpinUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpinUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload>[]
          }
          upsert: {
            args: Prisma.SpinUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpinPayload>
          }
          aggregate: {
            args: Prisma.SpinAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpin>
          }
          groupBy: {
            args: Prisma.SpinGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpinGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpinCountArgs<ExtArgs>
            result: $Utils.Optional<SpinCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    wheel?: WheelOmit
    join?: JoinOmit
    spin?: SpinOmit
    transaction?: TransactionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    joins: number
    spins: number
    transactions: number
    wheelsOwned: number
    wheelsHosted: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joins?: boolean | UserCountOutputTypeCountJoinsArgs
    spins?: boolean | UserCountOutputTypeCountSpinsArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
    wheelsOwned?: boolean | UserCountOutputTypeCountWheelsOwnedArgs
    wheelsHosted?: boolean | UserCountOutputTypeCountWheelsHostedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJoinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoinWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSpinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpinWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWheelsOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WheelWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWheelsHostedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WheelWhereInput
  }


  /**
   * Count Type WheelCountOutputType
   */

  export type WheelCountOutputType = {
    joins: number
    spins: number
    transactions: number
  }

  export type WheelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joins?: boolean | WheelCountOutputTypeCountJoinsArgs
    spins?: boolean | WheelCountOutputTypeCountSpinsArgs
    transactions?: boolean | WheelCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * WheelCountOutputType without action
   */
  export type WheelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WheelCountOutputType
     */
    select?: WheelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WheelCountOutputType without action
   */
  export type WheelCountOutputTypeCountJoinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoinWhereInput
  }

  /**
   * WheelCountOutputType without action
   */
  export type WheelCountOutputTypeCountSpinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpinWhereInput
  }

  /**
   * WheelCountOutputType without action
   */
  export type WheelCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    coins: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    coins: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    coins: number | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    coins: number | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    coins: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    coins?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    coins?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    coins?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    coins?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    coins?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    coins: number
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    coins?: boolean
    createdAt?: boolean
    joins?: boolean | User$joinsArgs<ExtArgs>
    spins?: boolean | User$spinsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    wheelsOwned?: boolean | User$wheelsOwnedArgs<ExtArgs>
    wheelsHosted?: boolean | User$wheelsHostedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    coins?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    coins?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    coins?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "coins" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joins?: boolean | User$joinsArgs<ExtArgs>
    spins?: boolean | User$spinsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    wheelsOwned?: boolean | User$wheelsOwnedArgs<ExtArgs>
    wheelsHosted?: boolean | User$wheelsHostedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      joins: Prisma.$JoinPayload<ExtArgs>[]
      spins: Prisma.$SpinPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      wheelsOwned: Prisma.$WheelPayload<ExtArgs>[]
      wheelsHosted: Prisma.$WheelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      coins: number
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    joins<T extends User$joinsArgs<ExtArgs> = {}>(args?: Subset<T, User$joinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spins<T extends User$spinsArgs<ExtArgs> = {}>(args?: Subset<T, User$spinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wheelsOwned<T extends User$wheelsOwnedArgs<ExtArgs> = {}>(args?: Subset<T, User$wheelsOwnedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wheelsHosted<T extends User$wheelsHostedArgs<ExtArgs> = {}>(args?: Subset<T, User$wheelsHostedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly coins: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.joins
   */
  export type User$joinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    where?: JoinWhereInput
    orderBy?: JoinOrderByWithRelationInput | JoinOrderByWithRelationInput[]
    cursor?: JoinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoinScalarFieldEnum | JoinScalarFieldEnum[]
  }

  /**
   * User.spins
   */
  export type User$spinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    where?: SpinWhereInput
    orderBy?: SpinOrderByWithRelationInput | SpinOrderByWithRelationInput[]
    cursor?: SpinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpinScalarFieldEnum | SpinScalarFieldEnum[]
  }

  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.wheelsOwned
   */
  export type User$wheelsOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    where?: WheelWhereInput
    orderBy?: WheelOrderByWithRelationInput | WheelOrderByWithRelationInput[]
    cursor?: WheelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WheelScalarFieldEnum | WheelScalarFieldEnum[]
  }

  /**
   * User.wheelsHosted
   */
  export type User$wheelsHostedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    where?: WheelWhereInput
    orderBy?: WheelOrderByWithRelationInput | WheelOrderByWithRelationInput[]
    cursor?: WheelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WheelScalarFieldEnum | WheelScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Wheel
   */

  export type AggregateWheel = {
    _count: WheelCountAggregateOutputType | null
    _avg: WheelAvgAggregateOutputType | null
    _sum: WheelSumAggregateOutputType | null
    _min: WheelMinAggregateOutputType | null
    _max: WheelMaxAggregateOutputType | null
  }

  export type WheelAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    hostId: number | null
    entry_fee: number | null
    winnerPool: number | null
    ownerPool: number | null
    appPool: number | null
  }

  export type WheelSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    hostId: number | null
    entry_fee: number | null
    winnerPool: number | null
    ownerPool: number | null
    appPool: number | null
  }

  export type WheelMinAggregateOutputType = {
    id: number | null
    ownerId: number | null
    hostId: number | null
    entry_fee: number | null
    winnerPool: number | null
    ownerPool: number | null
    appPool: number | null
    status: $Enums.WheelStatus | null
    startsAt: Date | null
    endsAt: Date | null
    createdAt: Date | null
  }

  export type WheelMaxAggregateOutputType = {
    id: number | null
    ownerId: number | null
    hostId: number | null
    entry_fee: number | null
    winnerPool: number | null
    ownerPool: number | null
    appPool: number | null
    status: $Enums.WheelStatus | null
    startsAt: Date | null
    endsAt: Date | null
    createdAt: Date | null
  }

  export type WheelCountAggregateOutputType = {
    id: number
    ownerId: number
    hostId: number
    entry_fee: number
    winnerPool: number
    ownerPool: number
    appPool: number
    status: number
    startsAt: number
    endsAt: number
    createdAt: number
    _all: number
  }


  export type WheelAvgAggregateInputType = {
    id?: true
    ownerId?: true
    hostId?: true
    entry_fee?: true
    winnerPool?: true
    ownerPool?: true
    appPool?: true
  }

  export type WheelSumAggregateInputType = {
    id?: true
    ownerId?: true
    hostId?: true
    entry_fee?: true
    winnerPool?: true
    ownerPool?: true
    appPool?: true
  }

  export type WheelMinAggregateInputType = {
    id?: true
    ownerId?: true
    hostId?: true
    entry_fee?: true
    winnerPool?: true
    ownerPool?: true
    appPool?: true
    status?: true
    startsAt?: true
    endsAt?: true
    createdAt?: true
  }

  export type WheelMaxAggregateInputType = {
    id?: true
    ownerId?: true
    hostId?: true
    entry_fee?: true
    winnerPool?: true
    ownerPool?: true
    appPool?: true
    status?: true
    startsAt?: true
    endsAt?: true
    createdAt?: true
  }

  export type WheelCountAggregateInputType = {
    id?: true
    ownerId?: true
    hostId?: true
    entry_fee?: true
    winnerPool?: true
    ownerPool?: true
    appPool?: true
    status?: true
    startsAt?: true
    endsAt?: true
    createdAt?: true
    _all?: true
  }

  export type WheelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wheel to aggregate.
     */
    where?: WheelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wheels to fetch.
     */
    orderBy?: WheelOrderByWithRelationInput | WheelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WheelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wheels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wheels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wheels
    **/
    _count?: true | WheelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WheelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WheelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WheelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WheelMaxAggregateInputType
  }

  export type GetWheelAggregateType<T extends WheelAggregateArgs> = {
        [P in keyof T & keyof AggregateWheel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWheel[P]>
      : GetScalarType<T[P], AggregateWheel[P]>
  }




  export type WheelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WheelWhereInput
    orderBy?: WheelOrderByWithAggregationInput | WheelOrderByWithAggregationInput[]
    by: WheelScalarFieldEnum[] | WheelScalarFieldEnum
    having?: WheelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WheelCountAggregateInputType | true
    _avg?: WheelAvgAggregateInputType
    _sum?: WheelSumAggregateInputType
    _min?: WheelMinAggregateInputType
    _max?: WheelMaxAggregateInputType
  }

  export type WheelGroupByOutputType = {
    id: number
    ownerId: number
    hostId: number
    entry_fee: number
    winnerPool: number
    ownerPool: number
    appPool: number
    status: $Enums.WheelStatus
    startsAt: Date | null
    endsAt: Date | null
    createdAt: Date
    _count: WheelCountAggregateOutputType | null
    _avg: WheelAvgAggregateOutputType | null
    _sum: WheelSumAggregateOutputType | null
    _min: WheelMinAggregateOutputType | null
    _max: WheelMaxAggregateOutputType | null
  }

  type GetWheelGroupByPayload<T extends WheelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WheelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WheelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WheelGroupByOutputType[P]>
            : GetScalarType<T[P], WheelGroupByOutputType[P]>
        }
      >
    >


  export type WheelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    hostId?: boolean
    entry_fee?: boolean
    winnerPool?: boolean
    ownerPool?: boolean
    appPool?: boolean
    status?: boolean
    startsAt?: boolean
    endsAt?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    joins?: boolean | Wheel$joinsArgs<ExtArgs>
    spins?: boolean | Wheel$spinsArgs<ExtArgs>
    transactions?: boolean | Wheel$transactionsArgs<ExtArgs>
    _count?: boolean | WheelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wheel"]>

  export type WheelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    hostId?: boolean
    entry_fee?: boolean
    winnerPool?: boolean
    ownerPool?: boolean
    appPool?: boolean
    status?: boolean
    startsAt?: boolean
    endsAt?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wheel"]>

  export type WheelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    hostId?: boolean
    entry_fee?: boolean
    winnerPool?: boolean
    ownerPool?: boolean
    appPool?: boolean
    status?: boolean
    startsAt?: boolean
    endsAt?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wheel"]>

  export type WheelSelectScalar = {
    id?: boolean
    ownerId?: boolean
    hostId?: boolean
    entry_fee?: boolean
    winnerPool?: boolean
    ownerPool?: boolean
    appPool?: boolean
    status?: boolean
    startsAt?: boolean
    endsAt?: boolean
    createdAt?: boolean
  }

  export type WheelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ownerId" | "hostId" | "entry_fee" | "winnerPool" | "ownerPool" | "appPool" | "status" | "startsAt" | "endsAt" | "createdAt", ExtArgs["result"]["wheel"]>
  export type WheelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    joins?: boolean | Wheel$joinsArgs<ExtArgs>
    spins?: boolean | Wheel$spinsArgs<ExtArgs>
    transactions?: boolean | Wheel$transactionsArgs<ExtArgs>
    _count?: boolean | WheelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WheelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WheelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WheelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wheel"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      host: Prisma.$UserPayload<ExtArgs>
      joins: Prisma.$JoinPayload<ExtArgs>[]
      spins: Prisma.$SpinPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ownerId: number
      hostId: number
      entry_fee: number
      winnerPool: number
      ownerPool: number
      appPool: number
      status: $Enums.WheelStatus
      startsAt: Date | null
      endsAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["wheel"]>
    composites: {}
  }

  type WheelGetPayload<S extends boolean | null | undefined | WheelDefaultArgs> = $Result.GetResult<Prisma.$WheelPayload, S>

  type WheelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WheelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WheelCountAggregateInputType | true
    }

  export interface WheelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wheel'], meta: { name: 'Wheel' } }
    /**
     * Find zero or one Wheel that matches the filter.
     * @param {WheelFindUniqueArgs} args - Arguments to find a Wheel
     * @example
     * // Get one Wheel
     * const wheel = await prisma.wheel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WheelFindUniqueArgs>(args: SelectSubset<T, WheelFindUniqueArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wheel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WheelFindUniqueOrThrowArgs} args - Arguments to find a Wheel
     * @example
     * // Get one Wheel
     * const wheel = await prisma.wheel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WheelFindUniqueOrThrowArgs>(args: SelectSubset<T, WheelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wheel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WheelFindFirstArgs} args - Arguments to find a Wheel
     * @example
     * // Get one Wheel
     * const wheel = await prisma.wheel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WheelFindFirstArgs>(args?: SelectSubset<T, WheelFindFirstArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wheel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WheelFindFirstOrThrowArgs} args - Arguments to find a Wheel
     * @example
     * // Get one Wheel
     * const wheel = await prisma.wheel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WheelFindFirstOrThrowArgs>(args?: SelectSubset<T, WheelFindFirstOrThrowArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wheels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WheelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wheels
     * const wheels = await prisma.wheel.findMany()
     * 
     * // Get first 10 Wheels
     * const wheels = await prisma.wheel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wheelWithIdOnly = await prisma.wheel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WheelFindManyArgs>(args?: SelectSubset<T, WheelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wheel.
     * @param {WheelCreateArgs} args - Arguments to create a Wheel.
     * @example
     * // Create one Wheel
     * const Wheel = await prisma.wheel.create({
     *   data: {
     *     // ... data to create a Wheel
     *   }
     * })
     * 
     */
    create<T extends WheelCreateArgs>(args: SelectSubset<T, WheelCreateArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Wheels.
     * @param {WheelCreateManyArgs} args - Arguments to create many Wheels.
     * @example
     * // Create many Wheels
     * const wheel = await prisma.wheel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WheelCreateManyArgs>(args?: SelectSubset<T, WheelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wheels and returns the data saved in the database.
     * @param {WheelCreateManyAndReturnArgs} args - Arguments to create many Wheels.
     * @example
     * // Create many Wheels
     * const wheel = await prisma.wheel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wheels and only return the `id`
     * const wheelWithIdOnly = await prisma.wheel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WheelCreateManyAndReturnArgs>(args?: SelectSubset<T, WheelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Wheel.
     * @param {WheelDeleteArgs} args - Arguments to delete one Wheel.
     * @example
     * // Delete one Wheel
     * const Wheel = await prisma.wheel.delete({
     *   where: {
     *     // ... filter to delete one Wheel
     *   }
     * })
     * 
     */
    delete<T extends WheelDeleteArgs>(args: SelectSubset<T, WheelDeleteArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wheel.
     * @param {WheelUpdateArgs} args - Arguments to update one Wheel.
     * @example
     * // Update one Wheel
     * const wheel = await prisma.wheel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WheelUpdateArgs>(args: SelectSubset<T, WheelUpdateArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Wheels.
     * @param {WheelDeleteManyArgs} args - Arguments to filter Wheels to delete.
     * @example
     * // Delete a few Wheels
     * const { count } = await prisma.wheel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WheelDeleteManyArgs>(args?: SelectSubset<T, WheelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wheels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WheelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wheels
     * const wheel = await prisma.wheel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WheelUpdateManyArgs>(args: SelectSubset<T, WheelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wheels and returns the data updated in the database.
     * @param {WheelUpdateManyAndReturnArgs} args - Arguments to update many Wheels.
     * @example
     * // Update many Wheels
     * const wheel = await prisma.wheel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wheels and only return the `id`
     * const wheelWithIdOnly = await prisma.wheel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WheelUpdateManyAndReturnArgs>(args: SelectSubset<T, WheelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Wheel.
     * @param {WheelUpsertArgs} args - Arguments to update or create a Wheel.
     * @example
     * // Update or create a Wheel
     * const wheel = await prisma.wheel.upsert({
     *   create: {
     *     // ... data to create a Wheel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wheel we want to update
     *   }
     * })
     */
    upsert<T extends WheelUpsertArgs>(args: SelectSubset<T, WheelUpsertArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Wheels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WheelCountArgs} args - Arguments to filter Wheels to count.
     * @example
     * // Count the number of Wheels
     * const count = await prisma.wheel.count({
     *   where: {
     *     // ... the filter for the Wheels we want to count
     *   }
     * })
    **/
    count<T extends WheelCountArgs>(
      args?: Subset<T, WheelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WheelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wheel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WheelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WheelAggregateArgs>(args: Subset<T, WheelAggregateArgs>): Prisma.PrismaPromise<GetWheelAggregateType<T>>

    /**
     * Group by Wheel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WheelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WheelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WheelGroupByArgs['orderBy'] }
        : { orderBy?: WheelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WheelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWheelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wheel model
   */
  readonly fields: WheelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wheel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WheelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    host<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    joins<T extends Wheel$joinsArgs<ExtArgs> = {}>(args?: Subset<T, Wheel$joinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spins<T extends Wheel$spinsArgs<ExtArgs> = {}>(args?: Subset<T, Wheel$spinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends Wheel$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Wheel$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wheel model
   */
  interface WheelFieldRefs {
    readonly id: FieldRef<"Wheel", 'Int'>
    readonly ownerId: FieldRef<"Wheel", 'Int'>
    readonly hostId: FieldRef<"Wheel", 'Int'>
    readonly entry_fee: FieldRef<"Wheel", 'Int'>
    readonly winnerPool: FieldRef<"Wheel", 'Int'>
    readonly ownerPool: FieldRef<"Wheel", 'Int'>
    readonly appPool: FieldRef<"Wheel", 'Int'>
    readonly status: FieldRef<"Wheel", 'WheelStatus'>
    readonly startsAt: FieldRef<"Wheel", 'DateTime'>
    readonly endsAt: FieldRef<"Wheel", 'DateTime'>
    readonly createdAt: FieldRef<"Wheel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Wheel findUnique
   */
  export type WheelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    /**
     * Filter, which Wheel to fetch.
     */
    where: WheelWhereUniqueInput
  }

  /**
   * Wheel findUniqueOrThrow
   */
  export type WheelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    /**
     * Filter, which Wheel to fetch.
     */
    where: WheelWhereUniqueInput
  }

  /**
   * Wheel findFirst
   */
  export type WheelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    /**
     * Filter, which Wheel to fetch.
     */
    where?: WheelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wheels to fetch.
     */
    orderBy?: WheelOrderByWithRelationInput | WheelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wheels.
     */
    cursor?: WheelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wheels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wheels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wheels.
     */
    distinct?: WheelScalarFieldEnum | WheelScalarFieldEnum[]
  }

  /**
   * Wheel findFirstOrThrow
   */
  export type WheelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    /**
     * Filter, which Wheel to fetch.
     */
    where?: WheelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wheels to fetch.
     */
    orderBy?: WheelOrderByWithRelationInput | WheelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wheels.
     */
    cursor?: WheelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wheels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wheels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wheels.
     */
    distinct?: WheelScalarFieldEnum | WheelScalarFieldEnum[]
  }

  /**
   * Wheel findMany
   */
  export type WheelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    /**
     * Filter, which Wheels to fetch.
     */
    where?: WheelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wheels to fetch.
     */
    orderBy?: WheelOrderByWithRelationInput | WheelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wheels.
     */
    cursor?: WheelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wheels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wheels.
     */
    skip?: number
    distinct?: WheelScalarFieldEnum | WheelScalarFieldEnum[]
  }

  /**
   * Wheel create
   */
  export type WheelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    /**
     * The data needed to create a Wheel.
     */
    data: XOR<WheelCreateInput, WheelUncheckedCreateInput>
  }

  /**
   * Wheel createMany
   */
  export type WheelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wheels.
     */
    data: WheelCreateManyInput | WheelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wheel createManyAndReturn
   */
  export type WheelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * The data used to create many Wheels.
     */
    data: WheelCreateManyInput | WheelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wheel update
   */
  export type WheelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    /**
     * The data needed to update a Wheel.
     */
    data: XOR<WheelUpdateInput, WheelUncheckedUpdateInput>
    /**
     * Choose, which Wheel to update.
     */
    where: WheelWhereUniqueInput
  }

  /**
   * Wheel updateMany
   */
  export type WheelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wheels.
     */
    data: XOR<WheelUpdateManyMutationInput, WheelUncheckedUpdateManyInput>
    /**
     * Filter which Wheels to update
     */
    where?: WheelWhereInput
    /**
     * Limit how many Wheels to update.
     */
    limit?: number
  }

  /**
   * Wheel updateManyAndReturn
   */
  export type WheelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * The data used to update Wheels.
     */
    data: XOR<WheelUpdateManyMutationInput, WheelUncheckedUpdateManyInput>
    /**
     * Filter which Wheels to update
     */
    where?: WheelWhereInput
    /**
     * Limit how many Wheels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wheel upsert
   */
  export type WheelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    /**
     * The filter to search for the Wheel to update in case it exists.
     */
    where: WheelWhereUniqueInput
    /**
     * In case the Wheel found by the `where` argument doesn't exist, create a new Wheel with this data.
     */
    create: XOR<WheelCreateInput, WheelUncheckedCreateInput>
    /**
     * In case the Wheel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WheelUpdateInput, WheelUncheckedUpdateInput>
  }

  /**
   * Wheel delete
   */
  export type WheelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
    /**
     * Filter which Wheel to delete.
     */
    where: WheelWhereUniqueInput
  }

  /**
   * Wheel deleteMany
   */
  export type WheelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wheels to delete
     */
    where?: WheelWhereInput
    /**
     * Limit how many Wheels to delete.
     */
    limit?: number
  }

  /**
   * Wheel.joins
   */
  export type Wheel$joinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    where?: JoinWhereInput
    orderBy?: JoinOrderByWithRelationInput | JoinOrderByWithRelationInput[]
    cursor?: JoinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoinScalarFieldEnum | JoinScalarFieldEnum[]
  }

  /**
   * Wheel.spins
   */
  export type Wheel$spinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    where?: SpinWhereInput
    orderBy?: SpinOrderByWithRelationInput | SpinOrderByWithRelationInput[]
    cursor?: SpinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpinScalarFieldEnum | SpinScalarFieldEnum[]
  }

  /**
   * Wheel.transactions
   */
  export type Wheel$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Wheel without action
   */
  export type WheelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wheel
     */
    select?: WheelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wheel
     */
    omit?: WheelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WheelInclude<ExtArgs> | null
  }


  /**
   * Model Join
   */

  export type AggregateJoin = {
    _count: JoinCountAggregateOutputType | null
    _avg: JoinAvgAggregateOutputType | null
    _sum: JoinSumAggregateOutputType | null
    _min: JoinMinAggregateOutputType | null
    _max: JoinMaxAggregateOutputType | null
  }

  export type JoinAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    wheelId: number | null
  }

  export type JoinSumAggregateOutputType = {
    id: number | null
    userId: number | null
    wheelId: number | null
  }

  export type JoinMinAggregateOutputType = {
    id: number | null
    userId: number | null
    wheelId: number | null
    joinedAt: Date | null
    eliminatedAt: Date | null
  }

  export type JoinMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    wheelId: number | null
    joinedAt: Date | null
    eliminatedAt: Date | null
  }

  export type JoinCountAggregateOutputType = {
    id: number
    userId: number
    wheelId: number
    joinedAt: number
    eliminatedAt: number
    _all: number
  }


  export type JoinAvgAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
  }

  export type JoinSumAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
  }

  export type JoinMinAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
    joinedAt?: true
    eliminatedAt?: true
  }

  export type JoinMaxAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
    joinedAt?: true
    eliminatedAt?: true
  }

  export type JoinCountAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
    joinedAt?: true
    eliminatedAt?: true
    _all?: true
  }

  export type JoinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Join to aggregate.
     */
    where?: JoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joins to fetch.
     */
    orderBy?: JoinOrderByWithRelationInput | JoinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Joins
    **/
    _count?: true | JoinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JoinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JoinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JoinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JoinMaxAggregateInputType
  }

  export type GetJoinAggregateType<T extends JoinAggregateArgs> = {
        [P in keyof T & keyof AggregateJoin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJoin[P]>
      : GetScalarType<T[P], AggregateJoin[P]>
  }




  export type JoinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoinWhereInput
    orderBy?: JoinOrderByWithAggregationInput | JoinOrderByWithAggregationInput[]
    by: JoinScalarFieldEnum[] | JoinScalarFieldEnum
    having?: JoinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JoinCountAggregateInputType | true
    _avg?: JoinAvgAggregateInputType
    _sum?: JoinSumAggregateInputType
    _min?: JoinMinAggregateInputType
    _max?: JoinMaxAggregateInputType
  }

  export type JoinGroupByOutputType = {
    id: number
    userId: number
    wheelId: number
    joinedAt: Date
    eliminatedAt: Date | null
    _count: JoinCountAggregateOutputType | null
    _avg: JoinAvgAggregateOutputType | null
    _sum: JoinSumAggregateOutputType | null
    _min: JoinMinAggregateOutputType | null
    _max: JoinMaxAggregateOutputType | null
  }

  type GetJoinGroupByPayload<T extends JoinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JoinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JoinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JoinGroupByOutputType[P]>
            : GetScalarType<T[P], JoinGroupByOutputType[P]>
        }
      >
    >


  export type JoinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    wheelId?: boolean
    joinedAt?: boolean
    eliminatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["join"]>

  export type JoinSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    wheelId?: boolean
    joinedAt?: boolean
    eliminatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["join"]>

  export type JoinSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    wheelId?: boolean
    joinedAt?: boolean
    eliminatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["join"]>

  export type JoinSelectScalar = {
    id?: boolean
    userId?: boolean
    wheelId?: boolean
    joinedAt?: boolean
    eliminatedAt?: boolean
  }

  export type JoinOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "wheelId" | "joinedAt" | "eliminatedAt", ExtArgs["result"]["join"]>
  export type JoinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }
  export type JoinIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }
  export type JoinIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }

  export type $JoinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Join"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      wheel: Prisma.$WheelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      wheelId: number
      joinedAt: Date
      eliminatedAt: Date | null
    }, ExtArgs["result"]["join"]>
    composites: {}
  }

  type JoinGetPayload<S extends boolean | null | undefined | JoinDefaultArgs> = $Result.GetResult<Prisma.$JoinPayload, S>

  type JoinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JoinFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JoinCountAggregateInputType | true
    }

  export interface JoinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Join'], meta: { name: 'Join' } }
    /**
     * Find zero or one Join that matches the filter.
     * @param {JoinFindUniqueArgs} args - Arguments to find a Join
     * @example
     * // Get one Join
     * const join = await prisma.join.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JoinFindUniqueArgs>(args: SelectSubset<T, JoinFindUniqueArgs<ExtArgs>>): Prisma__JoinClient<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Join that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JoinFindUniqueOrThrowArgs} args - Arguments to find a Join
     * @example
     * // Get one Join
     * const join = await prisma.join.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JoinFindUniqueOrThrowArgs>(args: SelectSubset<T, JoinFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JoinClient<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Join that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoinFindFirstArgs} args - Arguments to find a Join
     * @example
     * // Get one Join
     * const join = await prisma.join.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JoinFindFirstArgs>(args?: SelectSubset<T, JoinFindFirstArgs<ExtArgs>>): Prisma__JoinClient<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Join that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoinFindFirstOrThrowArgs} args - Arguments to find a Join
     * @example
     * // Get one Join
     * const join = await prisma.join.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JoinFindFirstOrThrowArgs>(args?: SelectSubset<T, JoinFindFirstOrThrowArgs<ExtArgs>>): Prisma__JoinClient<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Joins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Joins
     * const joins = await prisma.join.findMany()
     * 
     * // Get first 10 Joins
     * const joins = await prisma.join.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const joinWithIdOnly = await prisma.join.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JoinFindManyArgs>(args?: SelectSubset<T, JoinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Join.
     * @param {JoinCreateArgs} args - Arguments to create a Join.
     * @example
     * // Create one Join
     * const Join = await prisma.join.create({
     *   data: {
     *     // ... data to create a Join
     *   }
     * })
     * 
     */
    create<T extends JoinCreateArgs>(args: SelectSubset<T, JoinCreateArgs<ExtArgs>>): Prisma__JoinClient<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Joins.
     * @param {JoinCreateManyArgs} args - Arguments to create many Joins.
     * @example
     * // Create many Joins
     * const join = await prisma.join.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JoinCreateManyArgs>(args?: SelectSubset<T, JoinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Joins and returns the data saved in the database.
     * @param {JoinCreateManyAndReturnArgs} args - Arguments to create many Joins.
     * @example
     * // Create many Joins
     * const join = await prisma.join.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Joins and only return the `id`
     * const joinWithIdOnly = await prisma.join.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JoinCreateManyAndReturnArgs>(args?: SelectSubset<T, JoinCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Join.
     * @param {JoinDeleteArgs} args - Arguments to delete one Join.
     * @example
     * // Delete one Join
     * const Join = await prisma.join.delete({
     *   where: {
     *     // ... filter to delete one Join
     *   }
     * })
     * 
     */
    delete<T extends JoinDeleteArgs>(args: SelectSubset<T, JoinDeleteArgs<ExtArgs>>): Prisma__JoinClient<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Join.
     * @param {JoinUpdateArgs} args - Arguments to update one Join.
     * @example
     * // Update one Join
     * const join = await prisma.join.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JoinUpdateArgs>(args: SelectSubset<T, JoinUpdateArgs<ExtArgs>>): Prisma__JoinClient<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Joins.
     * @param {JoinDeleteManyArgs} args - Arguments to filter Joins to delete.
     * @example
     * // Delete a few Joins
     * const { count } = await prisma.join.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JoinDeleteManyArgs>(args?: SelectSubset<T, JoinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Joins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Joins
     * const join = await prisma.join.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JoinUpdateManyArgs>(args: SelectSubset<T, JoinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Joins and returns the data updated in the database.
     * @param {JoinUpdateManyAndReturnArgs} args - Arguments to update many Joins.
     * @example
     * // Update many Joins
     * const join = await prisma.join.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Joins and only return the `id`
     * const joinWithIdOnly = await prisma.join.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JoinUpdateManyAndReturnArgs>(args: SelectSubset<T, JoinUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Join.
     * @param {JoinUpsertArgs} args - Arguments to update or create a Join.
     * @example
     * // Update or create a Join
     * const join = await prisma.join.upsert({
     *   create: {
     *     // ... data to create a Join
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Join we want to update
     *   }
     * })
     */
    upsert<T extends JoinUpsertArgs>(args: SelectSubset<T, JoinUpsertArgs<ExtArgs>>): Prisma__JoinClient<$Result.GetResult<Prisma.$JoinPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Joins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoinCountArgs} args - Arguments to filter Joins to count.
     * @example
     * // Count the number of Joins
     * const count = await prisma.join.count({
     *   where: {
     *     // ... the filter for the Joins we want to count
     *   }
     * })
    **/
    count<T extends JoinCountArgs>(
      args?: Subset<T, JoinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JoinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Join.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JoinAggregateArgs>(args: Subset<T, JoinAggregateArgs>): Prisma.PrismaPromise<GetJoinAggregateType<T>>

    /**
     * Group by Join.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JoinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JoinGroupByArgs['orderBy'] }
        : { orderBy?: JoinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JoinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJoinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Join model
   */
  readonly fields: JoinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Join.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JoinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wheel<T extends WheelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WheelDefaultArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Join model
   */
  interface JoinFieldRefs {
    readonly id: FieldRef<"Join", 'Int'>
    readonly userId: FieldRef<"Join", 'Int'>
    readonly wheelId: FieldRef<"Join", 'Int'>
    readonly joinedAt: FieldRef<"Join", 'DateTime'>
    readonly eliminatedAt: FieldRef<"Join", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Join findUnique
   */
  export type JoinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    /**
     * Filter, which Join to fetch.
     */
    where: JoinWhereUniqueInput
  }

  /**
   * Join findUniqueOrThrow
   */
  export type JoinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    /**
     * Filter, which Join to fetch.
     */
    where: JoinWhereUniqueInput
  }

  /**
   * Join findFirst
   */
  export type JoinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    /**
     * Filter, which Join to fetch.
     */
    where?: JoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joins to fetch.
     */
    orderBy?: JoinOrderByWithRelationInput | JoinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Joins.
     */
    cursor?: JoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Joins.
     */
    distinct?: JoinScalarFieldEnum | JoinScalarFieldEnum[]
  }

  /**
   * Join findFirstOrThrow
   */
  export type JoinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    /**
     * Filter, which Join to fetch.
     */
    where?: JoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joins to fetch.
     */
    orderBy?: JoinOrderByWithRelationInput | JoinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Joins.
     */
    cursor?: JoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Joins.
     */
    distinct?: JoinScalarFieldEnum | JoinScalarFieldEnum[]
  }

  /**
   * Join findMany
   */
  export type JoinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    /**
     * Filter, which Joins to fetch.
     */
    where?: JoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joins to fetch.
     */
    orderBy?: JoinOrderByWithRelationInput | JoinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Joins.
     */
    cursor?: JoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joins.
     */
    skip?: number
    distinct?: JoinScalarFieldEnum | JoinScalarFieldEnum[]
  }

  /**
   * Join create
   */
  export type JoinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    /**
     * The data needed to create a Join.
     */
    data: XOR<JoinCreateInput, JoinUncheckedCreateInput>
  }

  /**
   * Join createMany
   */
  export type JoinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Joins.
     */
    data: JoinCreateManyInput | JoinCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Join createManyAndReturn
   */
  export type JoinCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * The data used to create many Joins.
     */
    data: JoinCreateManyInput | JoinCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Join update
   */
  export type JoinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    /**
     * The data needed to update a Join.
     */
    data: XOR<JoinUpdateInput, JoinUncheckedUpdateInput>
    /**
     * Choose, which Join to update.
     */
    where: JoinWhereUniqueInput
  }

  /**
   * Join updateMany
   */
  export type JoinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Joins.
     */
    data: XOR<JoinUpdateManyMutationInput, JoinUncheckedUpdateManyInput>
    /**
     * Filter which Joins to update
     */
    where?: JoinWhereInput
    /**
     * Limit how many Joins to update.
     */
    limit?: number
  }

  /**
   * Join updateManyAndReturn
   */
  export type JoinUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * The data used to update Joins.
     */
    data: XOR<JoinUpdateManyMutationInput, JoinUncheckedUpdateManyInput>
    /**
     * Filter which Joins to update
     */
    where?: JoinWhereInput
    /**
     * Limit how many Joins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Join upsert
   */
  export type JoinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    /**
     * The filter to search for the Join to update in case it exists.
     */
    where: JoinWhereUniqueInput
    /**
     * In case the Join found by the `where` argument doesn't exist, create a new Join with this data.
     */
    create: XOR<JoinCreateInput, JoinUncheckedCreateInput>
    /**
     * In case the Join was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JoinUpdateInput, JoinUncheckedUpdateInput>
  }

  /**
   * Join delete
   */
  export type JoinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
    /**
     * Filter which Join to delete.
     */
    where: JoinWhereUniqueInput
  }

  /**
   * Join deleteMany
   */
  export type JoinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Joins to delete
     */
    where?: JoinWhereInput
    /**
     * Limit how many Joins to delete.
     */
    limit?: number
  }

  /**
   * Join without action
   */
  export type JoinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Join
     */
    select?: JoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Join
     */
    omit?: JoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoinInclude<ExtArgs> | null
  }


  /**
   * Model Spin
   */

  export type AggregateSpin = {
    _count: SpinCountAggregateOutputType | null
    _avg: SpinAvgAggregateOutputType | null
    _sum: SpinSumAggregateOutputType | null
    _min: SpinMinAggregateOutputType | null
    _max: SpinMaxAggregateOutputType | null
  }

  export type SpinAvgAggregateOutputType = {
    id: number | null
    wheelId: number | null
    winnerId: number | null
    amount: number | null
  }

  export type SpinSumAggregateOutputType = {
    id: number | null
    wheelId: number | null
    winnerId: number | null
    amount: number | null
  }

  export type SpinMinAggregateOutputType = {
    id: number | null
    wheelId: number | null
    winnerId: number | null
    amount: number | null
    createdAt: Date | null
  }

  export type SpinMaxAggregateOutputType = {
    id: number | null
    wheelId: number | null
    winnerId: number | null
    amount: number | null
    createdAt: Date | null
  }

  export type SpinCountAggregateOutputType = {
    id: number
    wheelId: number
    winnerId: number
    amount: number
    createdAt: number
    _all: number
  }


  export type SpinAvgAggregateInputType = {
    id?: true
    wheelId?: true
    winnerId?: true
    amount?: true
  }

  export type SpinSumAggregateInputType = {
    id?: true
    wheelId?: true
    winnerId?: true
    amount?: true
  }

  export type SpinMinAggregateInputType = {
    id?: true
    wheelId?: true
    winnerId?: true
    amount?: true
    createdAt?: true
  }

  export type SpinMaxAggregateInputType = {
    id?: true
    wheelId?: true
    winnerId?: true
    amount?: true
    createdAt?: true
  }

  export type SpinCountAggregateInputType = {
    id?: true
    wheelId?: true
    winnerId?: true
    amount?: true
    createdAt?: true
    _all?: true
  }

  export type SpinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spin to aggregate.
     */
    where?: SpinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spins to fetch.
     */
    orderBy?: SpinOrderByWithRelationInput | SpinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Spins
    **/
    _count?: true | SpinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpinMaxAggregateInputType
  }

  export type GetSpinAggregateType<T extends SpinAggregateArgs> = {
        [P in keyof T & keyof AggregateSpin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpin[P]>
      : GetScalarType<T[P], AggregateSpin[P]>
  }




  export type SpinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpinWhereInput
    orderBy?: SpinOrderByWithAggregationInput | SpinOrderByWithAggregationInput[]
    by: SpinScalarFieldEnum[] | SpinScalarFieldEnum
    having?: SpinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpinCountAggregateInputType | true
    _avg?: SpinAvgAggregateInputType
    _sum?: SpinSumAggregateInputType
    _min?: SpinMinAggregateInputType
    _max?: SpinMaxAggregateInputType
  }

  export type SpinGroupByOutputType = {
    id: number
    wheelId: number
    winnerId: number
    amount: number
    createdAt: Date
    _count: SpinCountAggregateOutputType | null
    _avg: SpinAvgAggregateOutputType | null
    _sum: SpinSumAggregateOutputType | null
    _min: SpinMinAggregateOutputType | null
    _max: SpinMaxAggregateOutputType | null
  }

  type GetSpinGroupByPayload<T extends SpinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpinGroupByOutputType[P]>
            : GetScalarType<T[P], SpinGroupByOutputType[P]>
        }
      >
    >


  export type SpinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wheelId?: boolean
    winnerId?: boolean
    amount?: boolean
    createdAt?: boolean
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spin"]>

  export type SpinSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wheelId?: boolean
    winnerId?: boolean
    amount?: boolean
    createdAt?: boolean
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spin"]>

  export type SpinSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wheelId?: boolean
    winnerId?: boolean
    amount?: boolean
    createdAt?: boolean
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spin"]>

  export type SpinSelectScalar = {
    id?: boolean
    wheelId?: boolean
    winnerId?: boolean
    amount?: boolean
    createdAt?: boolean
  }

  export type SpinOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "wheelId" | "winnerId" | "amount" | "createdAt", ExtArgs["result"]["spin"]>
  export type SpinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SpinIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SpinIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SpinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Spin"
    objects: {
      wheel: Prisma.$WheelPayload<ExtArgs>
      winner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      wheelId: number
      winnerId: number
      amount: number
      createdAt: Date
    }, ExtArgs["result"]["spin"]>
    composites: {}
  }

  type SpinGetPayload<S extends boolean | null | undefined | SpinDefaultArgs> = $Result.GetResult<Prisma.$SpinPayload, S>

  type SpinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpinFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpinCountAggregateInputType | true
    }

  export interface SpinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Spin'], meta: { name: 'Spin' } }
    /**
     * Find zero or one Spin that matches the filter.
     * @param {SpinFindUniqueArgs} args - Arguments to find a Spin
     * @example
     * // Get one Spin
     * const spin = await prisma.spin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpinFindUniqueArgs>(args: SelectSubset<T, SpinFindUniqueArgs<ExtArgs>>): Prisma__SpinClient<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Spin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpinFindUniqueOrThrowArgs} args - Arguments to find a Spin
     * @example
     * // Get one Spin
     * const spin = await prisma.spin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpinFindUniqueOrThrowArgs>(args: SelectSubset<T, SpinFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpinClient<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Spin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpinFindFirstArgs} args - Arguments to find a Spin
     * @example
     * // Get one Spin
     * const spin = await prisma.spin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpinFindFirstArgs>(args?: SelectSubset<T, SpinFindFirstArgs<ExtArgs>>): Prisma__SpinClient<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Spin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpinFindFirstOrThrowArgs} args - Arguments to find a Spin
     * @example
     * // Get one Spin
     * const spin = await prisma.spin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpinFindFirstOrThrowArgs>(args?: SelectSubset<T, SpinFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpinClient<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Spins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Spins
     * const spins = await prisma.spin.findMany()
     * 
     * // Get first 10 Spins
     * const spins = await prisma.spin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spinWithIdOnly = await prisma.spin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpinFindManyArgs>(args?: SelectSubset<T, SpinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Spin.
     * @param {SpinCreateArgs} args - Arguments to create a Spin.
     * @example
     * // Create one Spin
     * const Spin = await prisma.spin.create({
     *   data: {
     *     // ... data to create a Spin
     *   }
     * })
     * 
     */
    create<T extends SpinCreateArgs>(args: SelectSubset<T, SpinCreateArgs<ExtArgs>>): Prisma__SpinClient<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Spins.
     * @param {SpinCreateManyArgs} args - Arguments to create many Spins.
     * @example
     * // Create many Spins
     * const spin = await prisma.spin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpinCreateManyArgs>(args?: SelectSubset<T, SpinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Spins and returns the data saved in the database.
     * @param {SpinCreateManyAndReturnArgs} args - Arguments to create many Spins.
     * @example
     * // Create many Spins
     * const spin = await prisma.spin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Spins and only return the `id`
     * const spinWithIdOnly = await prisma.spin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpinCreateManyAndReturnArgs>(args?: SelectSubset<T, SpinCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Spin.
     * @param {SpinDeleteArgs} args - Arguments to delete one Spin.
     * @example
     * // Delete one Spin
     * const Spin = await prisma.spin.delete({
     *   where: {
     *     // ... filter to delete one Spin
     *   }
     * })
     * 
     */
    delete<T extends SpinDeleteArgs>(args: SelectSubset<T, SpinDeleteArgs<ExtArgs>>): Prisma__SpinClient<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Spin.
     * @param {SpinUpdateArgs} args - Arguments to update one Spin.
     * @example
     * // Update one Spin
     * const spin = await prisma.spin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpinUpdateArgs>(args: SelectSubset<T, SpinUpdateArgs<ExtArgs>>): Prisma__SpinClient<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Spins.
     * @param {SpinDeleteManyArgs} args - Arguments to filter Spins to delete.
     * @example
     * // Delete a few Spins
     * const { count } = await prisma.spin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpinDeleteManyArgs>(args?: SelectSubset<T, SpinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Spins
     * const spin = await prisma.spin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpinUpdateManyArgs>(args: SelectSubset<T, SpinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spins and returns the data updated in the database.
     * @param {SpinUpdateManyAndReturnArgs} args - Arguments to update many Spins.
     * @example
     * // Update many Spins
     * const spin = await prisma.spin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Spins and only return the `id`
     * const spinWithIdOnly = await prisma.spin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpinUpdateManyAndReturnArgs>(args: SelectSubset<T, SpinUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Spin.
     * @param {SpinUpsertArgs} args - Arguments to update or create a Spin.
     * @example
     * // Update or create a Spin
     * const spin = await prisma.spin.upsert({
     *   create: {
     *     // ... data to create a Spin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Spin we want to update
     *   }
     * })
     */
    upsert<T extends SpinUpsertArgs>(args: SelectSubset<T, SpinUpsertArgs<ExtArgs>>): Prisma__SpinClient<$Result.GetResult<Prisma.$SpinPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Spins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpinCountArgs} args - Arguments to filter Spins to count.
     * @example
     * // Count the number of Spins
     * const count = await prisma.spin.count({
     *   where: {
     *     // ... the filter for the Spins we want to count
     *   }
     * })
    **/
    count<T extends SpinCountArgs>(
      args?: Subset<T, SpinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Spin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpinAggregateArgs>(args: Subset<T, SpinAggregateArgs>): Prisma.PrismaPromise<GetSpinAggregateType<T>>

    /**
     * Group by Spin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpinGroupByArgs['orderBy'] }
        : { orderBy?: SpinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Spin model
   */
  readonly fields: SpinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Spin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wheel<T extends WheelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WheelDefaultArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    winner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Spin model
   */
  interface SpinFieldRefs {
    readonly id: FieldRef<"Spin", 'Int'>
    readonly wheelId: FieldRef<"Spin", 'Int'>
    readonly winnerId: FieldRef<"Spin", 'Int'>
    readonly amount: FieldRef<"Spin", 'Int'>
    readonly createdAt: FieldRef<"Spin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Spin findUnique
   */
  export type SpinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    /**
     * Filter, which Spin to fetch.
     */
    where: SpinWhereUniqueInput
  }

  /**
   * Spin findUniqueOrThrow
   */
  export type SpinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    /**
     * Filter, which Spin to fetch.
     */
    where: SpinWhereUniqueInput
  }

  /**
   * Spin findFirst
   */
  export type SpinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    /**
     * Filter, which Spin to fetch.
     */
    where?: SpinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spins to fetch.
     */
    orderBy?: SpinOrderByWithRelationInput | SpinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spins.
     */
    cursor?: SpinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spins.
     */
    distinct?: SpinScalarFieldEnum | SpinScalarFieldEnum[]
  }

  /**
   * Spin findFirstOrThrow
   */
  export type SpinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    /**
     * Filter, which Spin to fetch.
     */
    where?: SpinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spins to fetch.
     */
    orderBy?: SpinOrderByWithRelationInput | SpinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spins.
     */
    cursor?: SpinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spins.
     */
    distinct?: SpinScalarFieldEnum | SpinScalarFieldEnum[]
  }

  /**
   * Spin findMany
   */
  export type SpinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    /**
     * Filter, which Spins to fetch.
     */
    where?: SpinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spins to fetch.
     */
    orderBy?: SpinOrderByWithRelationInput | SpinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Spins.
     */
    cursor?: SpinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spins.
     */
    skip?: number
    distinct?: SpinScalarFieldEnum | SpinScalarFieldEnum[]
  }

  /**
   * Spin create
   */
  export type SpinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    /**
     * The data needed to create a Spin.
     */
    data: XOR<SpinCreateInput, SpinUncheckedCreateInput>
  }

  /**
   * Spin createMany
   */
  export type SpinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Spins.
     */
    data: SpinCreateManyInput | SpinCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Spin createManyAndReturn
   */
  export type SpinCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * The data used to create many Spins.
     */
    data: SpinCreateManyInput | SpinCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Spin update
   */
  export type SpinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    /**
     * The data needed to update a Spin.
     */
    data: XOR<SpinUpdateInput, SpinUncheckedUpdateInput>
    /**
     * Choose, which Spin to update.
     */
    where: SpinWhereUniqueInput
  }

  /**
   * Spin updateMany
   */
  export type SpinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Spins.
     */
    data: XOR<SpinUpdateManyMutationInput, SpinUncheckedUpdateManyInput>
    /**
     * Filter which Spins to update
     */
    where?: SpinWhereInput
    /**
     * Limit how many Spins to update.
     */
    limit?: number
  }

  /**
   * Spin updateManyAndReturn
   */
  export type SpinUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * The data used to update Spins.
     */
    data: XOR<SpinUpdateManyMutationInput, SpinUncheckedUpdateManyInput>
    /**
     * Filter which Spins to update
     */
    where?: SpinWhereInput
    /**
     * Limit how many Spins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Spin upsert
   */
  export type SpinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    /**
     * The filter to search for the Spin to update in case it exists.
     */
    where: SpinWhereUniqueInput
    /**
     * In case the Spin found by the `where` argument doesn't exist, create a new Spin with this data.
     */
    create: XOR<SpinCreateInput, SpinUncheckedCreateInput>
    /**
     * In case the Spin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpinUpdateInput, SpinUncheckedUpdateInput>
  }

  /**
   * Spin delete
   */
  export type SpinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
    /**
     * Filter which Spin to delete.
     */
    where: SpinWhereUniqueInput
  }

  /**
   * Spin deleteMany
   */
  export type SpinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spins to delete
     */
    where?: SpinWhereInput
    /**
     * Limit how many Spins to delete.
     */
    limit?: number
  }

  /**
   * Spin without action
   */
  export type SpinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spin
     */
    select?: SpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Spin
     */
    omit?: SpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpinInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    wheelId: number | null
    amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    wheelId: number | null
    amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    wheelId: number | null
    amount: number | null
    kind: string | null
    meta: string | null
    createdAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    wheelId: number | null
    amount: number | null
    kind: string | null
    meta: string | null
    createdAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    userId: number
    wheelId: number
    amount: number
    kind: number
    meta: number
    createdAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
    amount?: true
    kind?: true
    meta?: true
    createdAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
    amount?: true
    kind?: true
    meta?: true
    createdAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    userId?: true
    wheelId?: true
    amount?: true
    kind?: true
    meta?: true
    createdAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: number
    userId: number
    wheelId: number
    amount: number
    kind: string
    meta: string | null
    createdAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    wheelId?: boolean
    amount?: boolean
    kind?: boolean
    meta?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    wheelId?: boolean
    amount?: boolean
    kind?: boolean
    meta?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    wheelId?: boolean
    amount?: boolean
    kind?: boolean
    meta?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    wheelId?: boolean
    amount?: boolean
    kind?: boolean
    meta?: boolean
    createdAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "wheelId" | "amount" | "kind" | "meta" | "createdAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    wheel?: boolean | WheelDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      wheel: Prisma.$WheelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      wheelId: number
      amount: number
      kind: string
      meta: string | null
      createdAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wheel<T extends WheelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WheelDefaultArgs<ExtArgs>>): Prisma__WheelClient<$Result.GetResult<Prisma.$WheelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'Int'>
    readonly userId: FieldRef<"Transaction", 'Int'>
    readonly wheelId: FieldRef<"Transaction", 'Int'>
    readonly amount: FieldRef<"Transaction", 'Int'>
    readonly kind: FieldRef<"Transaction", 'String'>
    readonly meta: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    coins: 'coins',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WheelScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    hostId: 'hostId',
    entry_fee: 'entry_fee',
    winnerPool: 'winnerPool',
    ownerPool: 'ownerPool',
    appPool: 'appPool',
    status: 'status',
    startsAt: 'startsAt',
    endsAt: 'endsAt',
    createdAt: 'createdAt'
  };

  export type WheelScalarFieldEnum = (typeof WheelScalarFieldEnum)[keyof typeof WheelScalarFieldEnum]


  export const JoinScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    wheelId: 'wheelId',
    joinedAt: 'joinedAt',
    eliminatedAt: 'eliminatedAt'
  };

  export type JoinScalarFieldEnum = (typeof JoinScalarFieldEnum)[keyof typeof JoinScalarFieldEnum]


  export const SpinScalarFieldEnum: {
    id: 'id',
    wheelId: 'wheelId',
    winnerId: 'winnerId',
    amount: 'amount',
    createdAt: 'createdAt'
  };

  export type SpinScalarFieldEnum = (typeof SpinScalarFieldEnum)[keyof typeof SpinScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    wheelId: 'wheelId',
    amount: 'amount',
    kind: 'kind',
    meta: 'meta',
    createdAt: 'createdAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'WheelStatus'
   */
  export type EnumWheelStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WheelStatus'>
    


  /**
   * Reference to a field of type 'WheelStatus[]'
   */
  export type ListEnumWheelStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WheelStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    coins?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    joins?: JoinListRelationFilter
    spins?: SpinListRelationFilter
    transactions?: TransactionListRelationFilter
    wheelsOwned?: WheelListRelationFilter
    wheelsHosted?: WheelListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    coins?: SortOrder
    createdAt?: SortOrder
    joins?: JoinOrderByRelationAggregateInput
    spins?: SpinOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    wheelsOwned?: WheelOrderByRelationAggregateInput
    wheelsHosted?: WheelOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    coins?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    joins?: JoinListRelationFilter
    spins?: SpinListRelationFilter
    transactions?: TransactionListRelationFilter
    wheelsOwned?: WheelListRelationFilter
    wheelsHosted?: WheelListRelationFilter
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    coins?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    coins?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WheelWhereInput = {
    AND?: WheelWhereInput | WheelWhereInput[]
    OR?: WheelWhereInput[]
    NOT?: WheelWhereInput | WheelWhereInput[]
    id?: IntFilter<"Wheel"> | number
    ownerId?: IntFilter<"Wheel"> | number
    hostId?: IntFilter<"Wheel"> | number
    entry_fee?: IntFilter<"Wheel"> | number
    winnerPool?: IntFilter<"Wheel"> | number
    ownerPool?: IntFilter<"Wheel"> | number
    appPool?: IntFilter<"Wheel"> | number
    status?: EnumWheelStatusFilter<"Wheel"> | $Enums.WheelStatus
    startsAt?: DateTimeNullableFilter<"Wheel"> | Date | string | null
    endsAt?: DateTimeNullableFilter<"Wheel"> | Date | string | null
    createdAt?: DateTimeFilter<"Wheel"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    joins?: JoinListRelationFilter
    spins?: SpinListRelationFilter
    transactions?: TransactionListRelationFilter
  }

  export type WheelOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    hostId?: SortOrder
    entry_fee?: SortOrder
    winnerPool?: SortOrder
    ownerPool?: SortOrder
    appPool?: SortOrder
    status?: SortOrder
    startsAt?: SortOrderInput | SortOrder
    endsAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    host?: UserOrderByWithRelationInput
    joins?: JoinOrderByRelationAggregateInput
    spins?: SpinOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type WheelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WheelWhereInput | WheelWhereInput[]
    OR?: WheelWhereInput[]
    NOT?: WheelWhereInput | WheelWhereInput[]
    ownerId?: IntFilter<"Wheel"> | number
    hostId?: IntFilter<"Wheel"> | number
    entry_fee?: IntFilter<"Wheel"> | number
    winnerPool?: IntFilter<"Wheel"> | number
    ownerPool?: IntFilter<"Wheel"> | number
    appPool?: IntFilter<"Wheel"> | number
    status?: EnumWheelStatusFilter<"Wheel"> | $Enums.WheelStatus
    startsAt?: DateTimeNullableFilter<"Wheel"> | Date | string | null
    endsAt?: DateTimeNullableFilter<"Wheel"> | Date | string | null
    createdAt?: DateTimeFilter<"Wheel"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    joins?: JoinListRelationFilter
    spins?: SpinListRelationFilter
    transactions?: TransactionListRelationFilter
  }, "id">

  export type WheelOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    hostId?: SortOrder
    entry_fee?: SortOrder
    winnerPool?: SortOrder
    ownerPool?: SortOrder
    appPool?: SortOrder
    status?: SortOrder
    startsAt?: SortOrderInput | SortOrder
    endsAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WheelCountOrderByAggregateInput
    _avg?: WheelAvgOrderByAggregateInput
    _max?: WheelMaxOrderByAggregateInput
    _min?: WheelMinOrderByAggregateInput
    _sum?: WheelSumOrderByAggregateInput
  }

  export type WheelScalarWhereWithAggregatesInput = {
    AND?: WheelScalarWhereWithAggregatesInput | WheelScalarWhereWithAggregatesInput[]
    OR?: WheelScalarWhereWithAggregatesInput[]
    NOT?: WheelScalarWhereWithAggregatesInput | WheelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Wheel"> | number
    ownerId?: IntWithAggregatesFilter<"Wheel"> | number
    hostId?: IntWithAggregatesFilter<"Wheel"> | number
    entry_fee?: IntWithAggregatesFilter<"Wheel"> | number
    winnerPool?: IntWithAggregatesFilter<"Wheel"> | number
    ownerPool?: IntWithAggregatesFilter<"Wheel"> | number
    appPool?: IntWithAggregatesFilter<"Wheel"> | number
    status?: EnumWheelStatusWithAggregatesFilter<"Wheel"> | $Enums.WheelStatus
    startsAt?: DateTimeNullableWithAggregatesFilter<"Wheel"> | Date | string | null
    endsAt?: DateTimeNullableWithAggregatesFilter<"Wheel"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Wheel"> | Date | string
  }

  export type JoinWhereInput = {
    AND?: JoinWhereInput | JoinWhereInput[]
    OR?: JoinWhereInput[]
    NOT?: JoinWhereInput | JoinWhereInput[]
    id?: IntFilter<"Join"> | number
    userId?: IntFilter<"Join"> | number
    wheelId?: IntFilter<"Join"> | number
    joinedAt?: DateTimeFilter<"Join"> | Date | string
    eliminatedAt?: DateTimeNullableFilter<"Join"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wheel?: XOR<WheelScalarRelationFilter, WheelWhereInput>
  }

  export type JoinOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    joinedAt?: SortOrder
    eliminatedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    wheel?: WheelOrderByWithRelationInput
  }

  export type JoinWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JoinWhereInput | JoinWhereInput[]
    OR?: JoinWhereInput[]
    NOT?: JoinWhereInput | JoinWhereInput[]
    userId?: IntFilter<"Join"> | number
    wheelId?: IntFilter<"Join"> | number
    joinedAt?: DateTimeFilter<"Join"> | Date | string
    eliminatedAt?: DateTimeNullableFilter<"Join"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wheel?: XOR<WheelScalarRelationFilter, WheelWhereInput>
  }, "id">

  export type JoinOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    joinedAt?: SortOrder
    eliminatedAt?: SortOrderInput | SortOrder
    _count?: JoinCountOrderByAggregateInput
    _avg?: JoinAvgOrderByAggregateInput
    _max?: JoinMaxOrderByAggregateInput
    _min?: JoinMinOrderByAggregateInput
    _sum?: JoinSumOrderByAggregateInput
  }

  export type JoinScalarWhereWithAggregatesInput = {
    AND?: JoinScalarWhereWithAggregatesInput | JoinScalarWhereWithAggregatesInput[]
    OR?: JoinScalarWhereWithAggregatesInput[]
    NOT?: JoinScalarWhereWithAggregatesInput | JoinScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Join"> | number
    userId?: IntWithAggregatesFilter<"Join"> | number
    wheelId?: IntWithAggregatesFilter<"Join"> | number
    joinedAt?: DateTimeWithAggregatesFilter<"Join"> | Date | string
    eliminatedAt?: DateTimeNullableWithAggregatesFilter<"Join"> | Date | string | null
  }

  export type SpinWhereInput = {
    AND?: SpinWhereInput | SpinWhereInput[]
    OR?: SpinWhereInput[]
    NOT?: SpinWhereInput | SpinWhereInput[]
    id?: IntFilter<"Spin"> | number
    wheelId?: IntFilter<"Spin"> | number
    winnerId?: IntFilter<"Spin"> | number
    amount?: IntFilter<"Spin"> | number
    createdAt?: DateTimeFilter<"Spin"> | Date | string
    wheel?: XOR<WheelScalarRelationFilter, WheelWhereInput>
    winner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SpinOrderByWithRelationInput = {
    id?: SortOrder
    wheelId?: SortOrder
    winnerId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    wheel?: WheelOrderByWithRelationInput
    winner?: UserOrderByWithRelationInput
  }

  export type SpinWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SpinWhereInput | SpinWhereInput[]
    OR?: SpinWhereInput[]
    NOT?: SpinWhereInput | SpinWhereInput[]
    wheelId?: IntFilter<"Spin"> | number
    winnerId?: IntFilter<"Spin"> | number
    amount?: IntFilter<"Spin"> | number
    createdAt?: DateTimeFilter<"Spin"> | Date | string
    wheel?: XOR<WheelScalarRelationFilter, WheelWhereInput>
    winner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SpinOrderByWithAggregationInput = {
    id?: SortOrder
    wheelId?: SortOrder
    winnerId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    _count?: SpinCountOrderByAggregateInput
    _avg?: SpinAvgOrderByAggregateInput
    _max?: SpinMaxOrderByAggregateInput
    _min?: SpinMinOrderByAggregateInput
    _sum?: SpinSumOrderByAggregateInput
  }

  export type SpinScalarWhereWithAggregatesInput = {
    AND?: SpinScalarWhereWithAggregatesInput | SpinScalarWhereWithAggregatesInput[]
    OR?: SpinScalarWhereWithAggregatesInput[]
    NOT?: SpinScalarWhereWithAggregatesInput | SpinScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Spin"> | number
    wheelId?: IntWithAggregatesFilter<"Spin"> | number
    winnerId?: IntWithAggregatesFilter<"Spin"> | number
    amount?: IntWithAggregatesFilter<"Spin"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Spin"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: IntFilter<"Transaction"> | number
    userId?: IntFilter<"Transaction"> | number
    wheelId?: IntFilter<"Transaction"> | number
    amount?: IntFilter<"Transaction"> | number
    kind?: StringFilter<"Transaction"> | string
    meta?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wheel?: XOR<WheelScalarRelationFilter, WheelWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    amount?: SortOrder
    kind?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    wheel?: WheelOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    userId?: IntFilter<"Transaction"> | number
    wheelId?: IntFilter<"Transaction"> | number
    amount?: IntFilter<"Transaction"> | number
    kind?: StringFilter<"Transaction"> | string
    meta?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wheel?: XOR<WheelScalarRelationFilter, WheelWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    amount?: SortOrder
    kind?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transaction"> | number
    userId?: IntWithAggregatesFilter<"Transaction"> | number
    wheelId?: IntWithAggregatesFilter<"Transaction"> | number
    amount?: IntWithAggregatesFilter<"Transaction"> | number
    kind?: StringWithAggregatesFilter<"Transaction"> | string
    meta?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type UserCreateInput = {
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinCreateNestedManyWithoutUserInput
    spins?: SpinCreateNestedManyWithoutWinnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wheelsOwned?: WheelCreateNestedManyWithoutOwnerInput
    wheelsHosted?: WheelCreateNestedManyWithoutHostInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutUserInput
    spins?: SpinUncheckedCreateNestedManyWithoutWinnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wheelsOwned?: WheelUncheckedCreateNestedManyWithoutOwnerInput
    wheelsHosted?: WheelUncheckedCreateNestedManyWithoutHostInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUpdateManyWithoutUserNestedInput
    spins?: SpinUpdateManyWithoutWinnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wheelsOwned?: WheelUpdateManyWithoutOwnerNestedInput
    wheelsHosted?: WheelUpdateManyWithoutHostNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutUserNestedInput
    spins?: SpinUncheckedUpdateManyWithoutWinnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wheelsOwned?: WheelUncheckedUpdateManyWithoutOwnerNestedInput
    wheelsHosted?: WheelUncheckedUpdateManyWithoutHostNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    coins?: number
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WheelCreateInput = {
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutWheelsOwnedInput
    host: UserCreateNestedOneWithoutWheelsHostedInput
    joins?: JoinCreateNestedManyWithoutWheelInput
    spins?: SpinCreateNestedManyWithoutWheelInput
    transactions?: TransactionCreateNestedManyWithoutWheelInput
  }

  export type WheelUncheckedCreateInput = {
    id?: number
    ownerId: number
    hostId: number
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutWheelInput
    spins?: SpinUncheckedCreateNestedManyWithoutWheelInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutWheelInput
  }

  export type WheelUpdateInput = {
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutWheelsOwnedNestedInput
    host?: UserUpdateOneRequiredWithoutWheelsHostedNestedInput
    joins?: JoinUpdateManyWithoutWheelNestedInput
    spins?: SpinUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUpdateManyWithoutWheelNestedInput
  }

  export type WheelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutWheelNestedInput
    spins?: SpinUncheckedUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutWheelNestedInput
  }

  export type WheelCreateManyInput = {
    id?: number
    ownerId: number
    hostId: number
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
  }

  export type WheelUpdateManyMutationInput = {
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WheelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JoinCreateInput = {
    joinedAt?: Date | string
    eliminatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutJoinsInput
    wheel: WheelCreateNestedOneWithoutJoinsInput
  }

  export type JoinUncheckedCreateInput = {
    id?: number
    userId: number
    wheelId: number
    joinedAt?: Date | string
    eliminatedAt?: Date | string | null
  }

  export type JoinUpdateInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutJoinsNestedInput
    wheel?: WheelUpdateOneRequiredWithoutJoinsNestedInput
  }

  export type JoinUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JoinCreateManyInput = {
    id?: number
    userId: number
    wheelId: number
    joinedAt?: Date | string
    eliminatedAt?: Date | string | null
  }

  export type JoinUpdateManyMutationInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JoinUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SpinCreateInput = {
    amount: number
    createdAt?: Date | string
    wheel: WheelCreateNestedOneWithoutSpinsInput
    winner: UserCreateNestedOneWithoutSpinsInput
  }

  export type SpinUncheckedCreateInput = {
    id?: number
    wheelId: number
    winnerId: number
    amount: number
    createdAt?: Date | string
  }

  export type SpinUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wheel?: WheelUpdateOneRequiredWithoutSpinsNestedInput
    winner?: UserUpdateOneRequiredWithoutSpinsNestedInput
  }

  export type SpinUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    winnerId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpinCreateManyInput = {
    id?: number
    wheelId: number
    winnerId: number
    amount: number
    createdAt?: Date | string
  }

  export type SpinUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpinUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    winnerId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    amount: number
    kind: string
    meta?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
    wheel: WheelCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: number
    userId: number
    wheelId: number
    amount: number
    kind: string
    meta?: string | null
    createdAt?: Date | string
  }

  export type TransactionUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
    wheel?: WheelUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: number
    userId: number
    wheelId: number
    amount: number
    kind: string
    meta?: string | null
    createdAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type JoinListRelationFilter = {
    every?: JoinWhereInput
    some?: JoinWhereInput
    none?: JoinWhereInput
  }

  export type SpinListRelationFilter = {
    every?: SpinWhereInput
    some?: SpinWhereInput
    none?: SpinWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type WheelListRelationFilter = {
    every?: WheelWhereInput
    some?: WheelWhereInput
    none?: WheelWhereInput
  }

  export type JoinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WheelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    coins?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    coins?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    coins?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    coins?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    coins?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumWheelStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WheelStatus | EnumWheelStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WheelStatus[] | ListEnumWheelStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WheelStatus[] | ListEnumWheelStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWheelStatusFilter<$PrismaModel> | $Enums.WheelStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WheelCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    hostId?: SortOrder
    entry_fee?: SortOrder
    winnerPool?: SortOrder
    ownerPool?: SortOrder
    appPool?: SortOrder
    status?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    createdAt?: SortOrder
  }

  export type WheelAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    hostId?: SortOrder
    entry_fee?: SortOrder
    winnerPool?: SortOrder
    ownerPool?: SortOrder
    appPool?: SortOrder
  }

  export type WheelMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    hostId?: SortOrder
    entry_fee?: SortOrder
    winnerPool?: SortOrder
    ownerPool?: SortOrder
    appPool?: SortOrder
    status?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    createdAt?: SortOrder
  }

  export type WheelMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    hostId?: SortOrder
    entry_fee?: SortOrder
    winnerPool?: SortOrder
    ownerPool?: SortOrder
    appPool?: SortOrder
    status?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    createdAt?: SortOrder
  }

  export type WheelSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    hostId?: SortOrder
    entry_fee?: SortOrder
    winnerPool?: SortOrder
    ownerPool?: SortOrder
    appPool?: SortOrder
  }

  export type EnumWheelStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WheelStatus | EnumWheelStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WheelStatus[] | ListEnumWheelStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WheelStatus[] | ListEnumWheelStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWheelStatusWithAggregatesFilter<$PrismaModel> | $Enums.WheelStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWheelStatusFilter<$PrismaModel>
    _max?: NestedEnumWheelStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type WheelScalarRelationFilter = {
    is?: WheelWhereInput
    isNot?: WheelWhereInput
  }

  export type JoinCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    joinedAt?: SortOrder
    eliminatedAt?: SortOrder
  }

  export type JoinAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
  }

  export type JoinMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    joinedAt?: SortOrder
    eliminatedAt?: SortOrder
  }

  export type JoinMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    joinedAt?: SortOrder
    eliminatedAt?: SortOrder
  }

  export type JoinSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
  }

  export type SpinCountOrderByAggregateInput = {
    id?: SortOrder
    wheelId?: SortOrder
    winnerId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type SpinAvgOrderByAggregateInput = {
    id?: SortOrder
    wheelId?: SortOrder
    winnerId?: SortOrder
    amount?: SortOrder
  }

  export type SpinMaxOrderByAggregateInput = {
    id?: SortOrder
    wheelId?: SortOrder
    winnerId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type SpinMinOrderByAggregateInput = {
    id?: SortOrder
    wheelId?: SortOrder
    winnerId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type SpinSumOrderByAggregateInput = {
    id?: SortOrder
    wheelId?: SortOrder
    winnerId?: SortOrder
    amount?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    amount?: SortOrder
    kind?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    amount?: SortOrder
    kind?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    amount?: SortOrder
    kind?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wheelId?: SortOrder
    amount?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type JoinCreateNestedManyWithoutUserInput = {
    create?: XOR<JoinCreateWithoutUserInput, JoinUncheckedCreateWithoutUserInput> | JoinCreateWithoutUserInput[] | JoinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JoinCreateOrConnectWithoutUserInput | JoinCreateOrConnectWithoutUserInput[]
    createMany?: JoinCreateManyUserInputEnvelope
    connect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
  }

  export type SpinCreateNestedManyWithoutWinnerInput = {
    create?: XOR<SpinCreateWithoutWinnerInput, SpinUncheckedCreateWithoutWinnerInput> | SpinCreateWithoutWinnerInput[] | SpinUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: SpinCreateOrConnectWithoutWinnerInput | SpinCreateOrConnectWithoutWinnerInput[]
    createMany?: SpinCreateManyWinnerInputEnvelope
    connect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type WheelCreateNestedManyWithoutOwnerInput = {
    create?: XOR<WheelCreateWithoutOwnerInput, WheelUncheckedCreateWithoutOwnerInput> | WheelCreateWithoutOwnerInput[] | WheelUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WheelCreateOrConnectWithoutOwnerInput | WheelCreateOrConnectWithoutOwnerInput[]
    createMany?: WheelCreateManyOwnerInputEnvelope
    connect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
  }

  export type WheelCreateNestedManyWithoutHostInput = {
    create?: XOR<WheelCreateWithoutHostInput, WheelUncheckedCreateWithoutHostInput> | WheelCreateWithoutHostInput[] | WheelUncheckedCreateWithoutHostInput[]
    connectOrCreate?: WheelCreateOrConnectWithoutHostInput | WheelCreateOrConnectWithoutHostInput[]
    createMany?: WheelCreateManyHostInputEnvelope
    connect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
  }

  export type JoinUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<JoinCreateWithoutUserInput, JoinUncheckedCreateWithoutUserInput> | JoinCreateWithoutUserInput[] | JoinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JoinCreateOrConnectWithoutUserInput | JoinCreateOrConnectWithoutUserInput[]
    createMany?: JoinCreateManyUserInputEnvelope
    connect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
  }

  export type SpinUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<SpinCreateWithoutWinnerInput, SpinUncheckedCreateWithoutWinnerInput> | SpinCreateWithoutWinnerInput[] | SpinUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: SpinCreateOrConnectWithoutWinnerInput | SpinCreateOrConnectWithoutWinnerInput[]
    createMany?: SpinCreateManyWinnerInputEnvelope
    connect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type WheelUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<WheelCreateWithoutOwnerInput, WheelUncheckedCreateWithoutOwnerInput> | WheelCreateWithoutOwnerInput[] | WheelUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WheelCreateOrConnectWithoutOwnerInput | WheelCreateOrConnectWithoutOwnerInput[]
    createMany?: WheelCreateManyOwnerInputEnvelope
    connect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
  }

  export type WheelUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<WheelCreateWithoutHostInput, WheelUncheckedCreateWithoutHostInput> | WheelCreateWithoutHostInput[] | WheelUncheckedCreateWithoutHostInput[]
    connectOrCreate?: WheelCreateOrConnectWithoutHostInput | WheelCreateOrConnectWithoutHostInput[]
    createMany?: WheelCreateManyHostInputEnvelope
    connect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type JoinUpdateManyWithoutUserNestedInput = {
    create?: XOR<JoinCreateWithoutUserInput, JoinUncheckedCreateWithoutUserInput> | JoinCreateWithoutUserInput[] | JoinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JoinCreateOrConnectWithoutUserInput | JoinCreateOrConnectWithoutUserInput[]
    upsert?: JoinUpsertWithWhereUniqueWithoutUserInput | JoinUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JoinCreateManyUserInputEnvelope
    set?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    disconnect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    delete?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    connect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    update?: JoinUpdateWithWhereUniqueWithoutUserInput | JoinUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JoinUpdateManyWithWhereWithoutUserInput | JoinUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JoinScalarWhereInput | JoinScalarWhereInput[]
  }

  export type SpinUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<SpinCreateWithoutWinnerInput, SpinUncheckedCreateWithoutWinnerInput> | SpinCreateWithoutWinnerInput[] | SpinUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: SpinCreateOrConnectWithoutWinnerInput | SpinCreateOrConnectWithoutWinnerInput[]
    upsert?: SpinUpsertWithWhereUniqueWithoutWinnerInput | SpinUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: SpinCreateManyWinnerInputEnvelope
    set?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    disconnect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    delete?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    connect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    update?: SpinUpdateWithWhereUniqueWithoutWinnerInput | SpinUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: SpinUpdateManyWithWhereWithoutWinnerInput | SpinUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: SpinScalarWhereInput | SpinScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type WheelUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<WheelCreateWithoutOwnerInput, WheelUncheckedCreateWithoutOwnerInput> | WheelCreateWithoutOwnerInput[] | WheelUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WheelCreateOrConnectWithoutOwnerInput | WheelCreateOrConnectWithoutOwnerInput[]
    upsert?: WheelUpsertWithWhereUniqueWithoutOwnerInput | WheelUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: WheelCreateManyOwnerInputEnvelope
    set?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    disconnect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    delete?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    connect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    update?: WheelUpdateWithWhereUniqueWithoutOwnerInput | WheelUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: WheelUpdateManyWithWhereWithoutOwnerInput | WheelUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: WheelScalarWhereInput | WheelScalarWhereInput[]
  }

  export type WheelUpdateManyWithoutHostNestedInput = {
    create?: XOR<WheelCreateWithoutHostInput, WheelUncheckedCreateWithoutHostInput> | WheelCreateWithoutHostInput[] | WheelUncheckedCreateWithoutHostInput[]
    connectOrCreate?: WheelCreateOrConnectWithoutHostInput | WheelCreateOrConnectWithoutHostInput[]
    upsert?: WheelUpsertWithWhereUniqueWithoutHostInput | WheelUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: WheelCreateManyHostInputEnvelope
    set?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    disconnect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    delete?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    connect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    update?: WheelUpdateWithWhereUniqueWithoutHostInput | WheelUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: WheelUpdateManyWithWhereWithoutHostInput | WheelUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: WheelScalarWhereInput | WheelScalarWhereInput[]
  }

  export type JoinUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<JoinCreateWithoutUserInput, JoinUncheckedCreateWithoutUserInput> | JoinCreateWithoutUserInput[] | JoinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JoinCreateOrConnectWithoutUserInput | JoinCreateOrConnectWithoutUserInput[]
    upsert?: JoinUpsertWithWhereUniqueWithoutUserInput | JoinUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JoinCreateManyUserInputEnvelope
    set?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    disconnect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    delete?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    connect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    update?: JoinUpdateWithWhereUniqueWithoutUserInput | JoinUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JoinUpdateManyWithWhereWithoutUserInput | JoinUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JoinScalarWhereInput | JoinScalarWhereInput[]
  }

  export type SpinUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<SpinCreateWithoutWinnerInput, SpinUncheckedCreateWithoutWinnerInput> | SpinCreateWithoutWinnerInput[] | SpinUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: SpinCreateOrConnectWithoutWinnerInput | SpinCreateOrConnectWithoutWinnerInput[]
    upsert?: SpinUpsertWithWhereUniqueWithoutWinnerInput | SpinUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: SpinCreateManyWinnerInputEnvelope
    set?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    disconnect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    delete?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    connect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    update?: SpinUpdateWithWhereUniqueWithoutWinnerInput | SpinUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: SpinUpdateManyWithWhereWithoutWinnerInput | SpinUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: SpinScalarWhereInput | SpinScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type WheelUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<WheelCreateWithoutOwnerInput, WheelUncheckedCreateWithoutOwnerInput> | WheelCreateWithoutOwnerInput[] | WheelUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WheelCreateOrConnectWithoutOwnerInput | WheelCreateOrConnectWithoutOwnerInput[]
    upsert?: WheelUpsertWithWhereUniqueWithoutOwnerInput | WheelUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: WheelCreateManyOwnerInputEnvelope
    set?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    disconnect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    delete?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    connect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    update?: WheelUpdateWithWhereUniqueWithoutOwnerInput | WheelUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: WheelUpdateManyWithWhereWithoutOwnerInput | WheelUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: WheelScalarWhereInput | WheelScalarWhereInput[]
  }

  export type WheelUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<WheelCreateWithoutHostInput, WheelUncheckedCreateWithoutHostInput> | WheelCreateWithoutHostInput[] | WheelUncheckedCreateWithoutHostInput[]
    connectOrCreate?: WheelCreateOrConnectWithoutHostInput | WheelCreateOrConnectWithoutHostInput[]
    upsert?: WheelUpsertWithWhereUniqueWithoutHostInput | WheelUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: WheelCreateManyHostInputEnvelope
    set?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    disconnect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    delete?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    connect?: WheelWhereUniqueInput | WheelWhereUniqueInput[]
    update?: WheelUpdateWithWhereUniqueWithoutHostInput | WheelUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: WheelUpdateManyWithWhereWithoutHostInput | WheelUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: WheelScalarWhereInput | WheelScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWheelsOwnedInput = {
    create?: XOR<UserCreateWithoutWheelsOwnedInput, UserUncheckedCreateWithoutWheelsOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutWheelsOwnedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWheelsHostedInput = {
    create?: XOR<UserCreateWithoutWheelsHostedInput, UserUncheckedCreateWithoutWheelsHostedInput>
    connectOrCreate?: UserCreateOrConnectWithoutWheelsHostedInput
    connect?: UserWhereUniqueInput
  }

  export type JoinCreateNestedManyWithoutWheelInput = {
    create?: XOR<JoinCreateWithoutWheelInput, JoinUncheckedCreateWithoutWheelInput> | JoinCreateWithoutWheelInput[] | JoinUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: JoinCreateOrConnectWithoutWheelInput | JoinCreateOrConnectWithoutWheelInput[]
    createMany?: JoinCreateManyWheelInputEnvelope
    connect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
  }

  export type SpinCreateNestedManyWithoutWheelInput = {
    create?: XOR<SpinCreateWithoutWheelInput, SpinUncheckedCreateWithoutWheelInput> | SpinCreateWithoutWheelInput[] | SpinUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: SpinCreateOrConnectWithoutWheelInput | SpinCreateOrConnectWithoutWheelInput[]
    createMany?: SpinCreateManyWheelInputEnvelope
    connect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutWheelInput = {
    create?: XOR<TransactionCreateWithoutWheelInput, TransactionUncheckedCreateWithoutWheelInput> | TransactionCreateWithoutWheelInput[] | TransactionUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWheelInput | TransactionCreateOrConnectWithoutWheelInput[]
    createMany?: TransactionCreateManyWheelInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type JoinUncheckedCreateNestedManyWithoutWheelInput = {
    create?: XOR<JoinCreateWithoutWheelInput, JoinUncheckedCreateWithoutWheelInput> | JoinCreateWithoutWheelInput[] | JoinUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: JoinCreateOrConnectWithoutWheelInput | JoinCreateOrConnectWithoutWheelInput[]
    createMany?: JoinCreateManyWheelInputEnvelope
    connect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
  }

  export type SpinUncheckedCreateNestedManyWithoutWheelInput = {
    create?: XOR<SpinCreateWithoutWheelInput, SpinUncheckedCreateWithoutWheelInput> | SpinCreateWithoutWheelInput[] | SpinUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: SpinCreateOrConnectWithoutWheelInput | SpinCreateOrConnectWithoutWheelInput[]
    createMany?: SpinCreateManyWheelInputEnvelope
    connect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutWheelInput = {
    create?: XOR<TransactionCreateWithoutWheelInput, TransactionUncheckedCreateWithoutWheelInput> | TransactionCreateWithoutWheelInput[] | TransactionUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWheelInput | TransactionCreateOrConnectWithoutWheelInput[]
    createMany?: TransactionCreateManyWheelInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EnumWheelStatusFieldUpdateOperationsInput = {
    set?: $Enums.WheelStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutWheelsOwnedNestedInput = {
    create?: XOR<UserCreateWithoutWheelsOwnedInput, UserUncheckedCreateWithoutWheelsOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutWheelsOwnedInput
    upsert?: UserUpsertWithoutWheelsOwnedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWheelsOwnedInput, UserUpdateWithoutWheelsOwnedInput>, UserUncheckedUpdateWithoutWheelsOwnedInput>
  }

  export type UserUpdateOneRequiredWithoutWheelsHostedNestedInput = {
    create?: XOR<UserCreateWithoutWheelsHostedInput, UserUncheckedCreateWithoutWheelsHostedInput>
    connectOrCreate?: UserCreateOrConnectWithoutWheelsHostedInput
    upsert?: UserUpsertWithoutWheelsHostedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWheelsHostedInput, UserUpdateWithoutWheelsHostedInput>, UserUncheckedUpdateWithoutWheelsHostedInput>
  }

  export type JoinUpdateManyWithoutWheelNestedInput = {
    create?: XOR<JoinCreateWithoutWheelInput, JoinUncheckedCreateWithoutWheelInput> | JoinCreateWithoutWheelInput[] | JoinUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: JoinCreateOrConnectWithoutWheelInput | JoinCreateOrConnectWithoutWheelInput[]
    upsert?: JoinUpsertWithWhereUniqueWithoutWheelInput | JoinUpsertWithWhereUniqueWithoutWheelInput[]
    createMany?: JoinCreateManyWheelInputEnvelope
    set?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    disconnect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    delete?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    connect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    update?: JoinUpdateWithWhereUniqueWithoutWheelInput | JoinUpdateWithWhereUniqueWithoutWheelInput[]
    updateMany?: JoinUpdateManyWithWhereWithoutWheelInput | JoinUpdateManyWithWhereWithoutWheelInput[]
    deleteMany?: JoinScalarWhereInput | JoinScalarWhereInput[]
  }

  export type SpinUpdateManyWithoutWheelNestedInput = {
    create?: XOR<SpinCreateWithoutWheelInput, SpinUncheckedCreateWithoutWheelInput> | SpinCreateWithoutWheelInput[] | SpinUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: SpinCreateOrConnectWithoutWheelInput | SpinCreateOrConnectWithoutWheelInput[]
    upsert?: SpinUpsertWithWhereUniqueWithoutWheelInput | SpinUpsertWithWhereUniqueWithoutWheelInput[]
    createMany?: SpinCreateManyWheelInputEnvelope
    set?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    disconnect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    delete?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    connect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    update?: SpinUpdateWithWhereUniqueWithoutWheelInput | SpinUpdateWithWhereUniqueWithoutWheelInput[]
    updateMany?: SpinUpdateManyWithWhereWithoutWheelInput | SpinUpdateManyWithWhereWithoutWheelInput[]
    deleteMany?: SpinScalarWhereInput | SpinScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutWheelNestedInput = {
    create?: XOR<TransactionCreateWithoutWheelInput, TransactionUncheckedCreateWithoutWheelInput> | TransactionCreateWithoutWheelInput[] | TransactionUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWheelInput | TransactionCreateOrConnectWithoutWheelInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutWheelInput | TransactionUpsertWithWhereUniqueWithoutWheelInput[]
    createMany?: TransactionCreateManyWheelInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutWheelInput | TransactionUpdateWithWhereUniqueWithoutWheelInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutWheelInput | TransactionUpdateManyWithWhereWithoutWheelInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type JoinUncheckedUpdateManyWithoutWheelNestedInput = {
    create?: XOR<JoinCreateWithoutWheelInput, JoinUncheckedCreateWithoutWheelInput> | JoinCreateWithoutWheelInput[] | JoinUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: JoinCreateOrConnectWithoutWheelInput | JoinCreateOrConnectWithoutWheelInput[]
    upsert?: JoinUpsertWithWhereUniqueWithoutWheelInput | JoinUpsertWithWhereUniqueWithoutWheelInput[]
    createMany?: JoinCreateManyWheelInputEnvelope
    set?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    disconnect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    delete?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    connect?: JoinWhereUniqueInput | JoinWhereUniqueInput[]
    update?: JoinUpdateWithWhereUniqueWithoutWheelInput | JoinUpdateWithWhereUniqueWithoutWheelInput[]
    updateMany?: JoinUpdateManyWithWhereWithoutWheelInput | JoinUpdateManyWithWhereWithoutWheelInput[]
    deleteMany?: JoinScalarWhereInput | JoinScalarWhereInput[]
  }

  export type SpinUncheckedUpdateManyWithoutWheelNestedInput = {
    create?: XOR<SpinCreateWithoutWheelInput, SpinUncheckedCreateWithoutWheelInput> | SpinCreateWithoutWheelInput[] | SpinUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: SpinCreateOrConnectWithoutWheelInput | SpinCreateOrConnectWithoutWheelInput[]
    upsert?: SpinUpsertWithWhereUniqueWithoutWheelInput | SpinUpsertWithWhereUniqueWithoutWheelInput[]
    createMany?: SpinCreateManyWheelInputEnvelope
    set?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    disconnect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    delete?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    connect?: SpinWhereUniqueInput | SpinWhereUniqueInput[]
    update?: SpinUpdateWithWhereUniqueWithoutWheelInput | SpinUpdateWithWhereUniqueWithoutWheelInput[]
    updateMany?: SpinUpdateManyWithWhereWithoutWheelInput | SpinUpdateManyWithWhereWithoutWheelInput[]
    deleteMany?: SpinScalarWhereInput | SpinScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutWheelNestedInput = {
    create?: XOR<TransactionCreateWithoutWheelInput, TransactionUncheckedCreateWithoutWheelInput> | TransactionCreateWithoutWheelInput[] | TransactionUncheckedCreateWithoutWheelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWheelInput | TransactionCreateOrConnectWithoutWheelInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutWheelInput | TransactionUpsertWithWhereUniqueWithoutWheelInput[]
    createMany?: TransactionCreateManyWheelInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutWheelInput | TransactionUpdateWithWhereUniqueWithoutWheelInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutWheelInput | TransactionUpdateManyWithWhereWithoutWheelInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutJoinsInput = {
    create?: XOR<UserCreateWithoutJoinsInput, UserUncheckedCreateWithoutJoinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJoinsInput
    connect?: UserWhereUniqueInput
  }

  export type WheelCreateNestedOneWithoutJoinsInput = {
    create?: XOR<WheelCreateWithoutJoinsInput, WheelUncheckedCreateWithoutJoinsInput>
    connectOrCreate?: WheelCreateOrConnectWithoutJoinsInput
    connect?: WheelWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutJoinsNestedInput = {
    create?: XOR<UserCreateWithoutJoinsInput, UserUncheckedCreateWithoutJoinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJoinsInput
    upsert?: UserUpsertWithoutJoinsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJoinsInput, UserUpdateWithoutJoinsInput>, UserUncheckedUpdateWithoutJoinsInput>
  }

  export type WheelUpdateOneRequiredWithoutJoinsNestedInput = {
    create?: XOR<WheelCreateWithoutJoinsInput, WheelUncheckedCreateWithoutJoinsInput>
    connectOrCreate?: WheelCreateOrConnectWithoutJoinsInput
    upsert?: WheelUpsertWithoutJoinsInput
    connect?: WheelWhereUniqueInput
    update?: XOR<XOR<WheelUpdateToOneWithWhereWithoutJoinsInput, WheelUpdateWithoutJoinsInput>, WheelUncheckedUpdateWithoutJoinsInput>
  }

  export type WheelCreateNestedOneWithoutSpinsInput = {
    create?: XOR<WheelCreateWithoutSpinsInput, WheelUncheckedCreateWithoutSpinsInput>
    connectOrCreate?: WheelCreateOrConnectWithoutSpinsInput
    connect?: WheelWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSpinsInput = {
    create?: XOR<UserCreateWithoutSpinsInput, UserUncheckedCreateWithoutSpinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpinsInput
    connect?: UserWhereUniqueInput
  }

  export type WheelUpdateOneRequiredWithoutSpinsNestedInput = {
    create?: XOR<WheelCreateWithoutSpinsInput, WheelUncheckedCreateWithoutSpinsInput>
    connectOrCreate?: WheelCreateOrConnectWithoutSpinsInput
    upsert?: WheelUpsertWithoutSpinsInput
    connect?: WheelWhereUniqueInput
    update?: XOR<XOR<WheelUpdateToOneWithWhereWithoutSpinsInput, WheelUpdateWithoutSpinsInput>, WheelUncheckedUpdateWithoutSpinsInput>
  }

  export type UserUpdateOneRequiredWithoutSpinsNestedInput = {
    create?: XOR<UserCreateWithoutSpinsInput, UserUncheckedCreateWithoutSpinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpinsInput
    upsert?: UserUpsertWithoutSpinsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSpinsInput, UserUpdateWithoutSpinsInput>, UserUncheckedUpdateWithoutSpinsInput>
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type WheelCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<WheelCreateWithoutTransactionsInput, WheelUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: WheelCreateOrConnectWithoutTransactionsInput
    connect?: WheelWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsInput, UserUpdateWithoutTransactionsInput>, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type WheelUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<WheelCreateWithoutTransactionsInput, WheelUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: WheelCreateOrConnectWithoutTransactionsInput
    upsert?: WheelUpsertWithoutTransactionsInput
    connect?: WheelWhereUniqueInput
    update?: XOR<XOR<WheelUpdateToOneWithWhereWithoutTransactionsInput, WheelUpdateWithoutTransactionsInput>, WheelUncheckedUpdateWithoutTransactionsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumWheelStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WheelStatus | EnumWheelStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WheelStatus[] | ListEnumWheelStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WheelStatus[] | ListEnumWheelStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWheelStatusFilter<$PrismaModel> | $Enums.WheelStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumWheelStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WheelStatus | EnumWheelStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WheelStatus[] | ListEnumWheelStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WheelStatus[] | ListEnumWheelStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWheelStatusWithAggregatesFilter<$PrismaModel> | $Enums.WheelStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWheelStatusFilter<$PrismaModel>
    _max?: NestedEnumWheelStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type JoinCreateWithoutUserInput = {
    joinedAt?: Date | string
    eliminatedAt?: Date | string | null
    wheel: WheelCreateNestedOneWithoutJoinsInput
  }

  export type JoinUncheckedCreateWithoutUserInput = {
    id?: number
    wheelId: number
    joinedAt?: Date | string
    eliminatedAt?: Date | string | null
  }

  export type JoinCreateOrConnectWithoutUserInput = {
    where: JoinWhereUniqueInput
    create: XOR<JoinCreateWithoutUserInput, JoinUncheckedCreateWithoutUserInput>
  }

  export type JoinCreateManyUserInputEnvelope = {
    data: JoinCreateManyUserInput | JoinCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SpinCreateWithoutWinnerInput = {
    amount: number
    createdAt?: Date | string
    wheel: WheelCreateNestedOneWithoutSpinsInput
  }

  export type SpinUncheckedCreateWithoutWinnerInput = {
    id?: number
    wheelId: number
    amount: number
    createdAt?: Date | string
  }

  export type SpinCreateOrConnectWithoutWinnerInput = {
    where: SpinWhereUniqueInput
    create: XOR<SpinCreateWithoutWinnerInput, SpinUncheckedCreateWithoutWinnerInput>
  }

  export type SpinCreateManyWinnerInputEnvelope = {
    data: SpinCreateManyWinnerInput | SpinCreateManyWinnerInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutUserInput = {
    amount: number
    kind: string
    meta?: string | null
    createdAt?: Date | string
    wheel: WheelCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: number
    wheelId: number
    amount: number
    kind: string
    meta?: string | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: TransactionCreateManyUserInput | TransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WheelCreateWithoutOwnerInput = {
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    host: UserCreateNestedOneWithoutWheelsHostedInput
    joins?: JoinCreateNestedManyWithoutWheelInput
    spins?: SpinCreateNestedManyWithoutWheelInput
    transactions?: TransactionCreateNestedManyWithoutWheelInput
  }

  export type WheelUncheckedCreateWithoutOwnerInput = {
    id?: number
    hostId: number
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutWheelInput
    spins?: SpinUncheckedCreateNestedManyWithoutWheelInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutWheelInput
  }

  export type WheelCreateOrConnectWithoutOwnerInput = {
    where: WheelWhereUniqueInput
    create: XOR<WheelCreateWithoutOwnerInput, WheelUncheckedCreateWithoutOwnerInput>
  }

  export type WheelCreateManyOwnerInputEnvelope = {
    data: WheelCreateManyOwnerInput | WheelCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type WheelCreateWithoutHostInput = {
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutWheelsOwnedInput
    joins?: JoinCreateNestedManyWithoutWheelInput
    spins?: SpinCreateNestedManyWithoutWheelInput
    transactions?: TransactionCreateNestedManyWithoutWheelInput
  }

  export type WheelUncheckedCreateWithoutHostInput = {
    id?: number
    ownerId: number
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutWheelInput
    spins?: SpinUncheckedCreateNestedManyWithoutWheelInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutWheelInput
  }

  export type WheelCreateOrConnectWithoutHostInput = {
    where: WheelWhereUniqueInput
    create: XOR<WheelCreateWithoutHostInput, WheelUncheckedCreateWithoutHostInput>
  }

  export type WheelCreateManyHostInputEnvelope = {
    data: WheelCreateManyHostInput | WheelCreateManyHostInput[]
    skipDuplicates?: boolean
  }

  export type JoinUpsertWithWhereUniqueWithoutUserInput = {
    where: JoinWhereUniqueInput
    update: XOR<JoinUpdateWithoutUserInput, JoinUncheckedUpdateWithoutUserInput>
    create: XOR<JoinCreateWithoutUserInput, JoinUncheckedCreateWithoutUserInput>
  }

  export type JoinUpdateWithWhereUniqueWithoutUserInput = {
    where: JoinWhereUniqueInput
    data: XOR<JoinUpdateWithoutUserInput, JoinUncheckedUpdateWithoutUserInput>
  }

  export type JoinUpdateManyWithWhereWithoutUserInput = {
    where: JoinScalarWhereInput
    data: XOR<JoinUpdateManyMutationInput, JoinUncheckedUpdateManyWithoutUserInput>
  }

  export type JoinScalarWhereInput = {
    AND?: JoinScalarWhereInput | JoinScalarWhereInput[]
    OR?: JoinScalarWhereInput[]
    NOT?: JoinScalarWhereInput | JoinScalarWhereInput[]
    id?: IntFilter<"Join"> | number
    userId?: IntFilter<"Join"> | number
    wheelId?: IntFilter<"Join"> | number
    joinedAt?: DateTimeFilter<"Join"> | Date | string
    eliminatedAt?: DateTimeNullableFilter<"Join"> | Date | string | null
  }

  export type SpinUpsertWithWhereUniqueWithoutWinnerInput = {
    where: SpinWhereUniqueInput
    update: XOR<SpinUpdateWithoutWinnerInput, SpinUncheckedUpdateWithoutWinnerInput>
    create: XOR<SpinCreateWithoutWinnerInput, SpinUncheckedCreateWithoutWinnerInput>
  }

  export type SpinUpdateWithWhereUniqueWithoutWinnerInput = {
    where: SpinWhereUniqueInput
    data: XOR<SpinUpdateWithoutWinnerInput, SpinUncheckedUpdateWithoutWinnerInput>
  }

  export type SpinUpdateManyWithWhereWithoutWinnerInput = {
    where: SpinScalarWhereInput
    data: XOR<SpinUpdateManyMutationInput, SpinUncheckedUpdateManyWithoutWinnerInput>
  }

  export type SpinScalarWhereInput = {
    AND?: SpinScalarWhereInput | SpinScalarWhereInput[]
    OR?: SpinScalarWhereInput[]
    NOT?: SpinScalarWhereInput | SpinScalarWhereInput[]
    id?: IntFilter<"Spin"> | number
    wheelId?: IntFilter<"Spin"> | number
    winnerId?: IntFilter<"Spin"> | number
    amount?: IntFilter<"Spin"> | number
    createdAt?: DateTimeFilter<"Spin"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: IntFilter<"Transaction"> | number
    userId?: IntFilter<"Transaction"> | number
    wheelId?: IntFilter<"Transaction"> | number
    amount?: IntFilter<"Transaction"> | number
    kind?: StringFilter<"Transaction"> | string
    meta?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type WheelUpsertWithWhereUniqueWithoutOwnerInput = {
    where: WheelWhereUniqueInput
    update: XOR<WheelUpdateWithoutOwnerInput, WheelUncheckedUpdateWithoutOwnerInput>
    create: XOR<WheelCreateWithoutOwnerInput, WheelUncheckedCreateWithoutOwnerInput>
  }

  export type WheelUpdateWithWhereUniqueWithoutOwnerInput = {
    where: WheelWhereUniqueInput
    data: XOR<WheelUpdateWithoutOwnerInput, WheelUncheckedUpdateWithoutOwnerInput>
  }

  export type WheelUpdateManyWithWhereWithoutOwnerInput = {
    where: WheelScalarWhereInput
    data: XOR<WheelUpdateManyMutationInput, WheelUncheckedUpdateManyWithoutOwnerInput>
  }

  export type WheelScalarWhereInput = {
    AND?: WheelScalarWhereInput | WheelScalarWhereInput[]
    OR?: WheelScalarWhereInput[]
    NOT?: WheelScalarWhereInput | WheelScalarWhereInput[]
    id?: IntFilter<"Wheel"> | number
    ownerId?: IntFilter<"Wheel"> | number
    hostId?: IntFilter<"Wheel"> | number
    entry_fee?: IntFilter<"Wheel"> | number
    winnerPool?: IntFilter<"Wheel"> | number
    ownerPool?: IntFilter<"Wheel"> | number
    appPool?: IntFilter<"Wheel"> | number
    status?: EnumWheelStatusFilter<"Wheel"> | $Enums.WheelStatus
    startsAt?: DateTimeNullableFilter<"Wheel"> | Date | string | null
    endsAt?: DateTimeNullableFilter<"Wheel"> | Date | string | null
    createdAt?: DateTimeFilter<"Wheel"> | Date | string
  }

  export type WheelUpsertWithWhereUniqueWithoutHostInput = {
    where: WheelWhereUniqueInput
    update: XOR<WheelUpdateWithoutHostInput, WheelUncheckedUpdateWithoutHostInput>
    create: XOR<WheelCreateWithoutHostInput, WheelUncheckedCreateWithoutHostInput>
  }

  export type WheelUpdateWithWhereUniqueWithoutHostInput = {
    where: WheelWhereUniqueInput
    data: XOR<WheelUpdateWithoutHostInput, WheelUncheckedUpdateWithoutHostInput>
  }

  export type WheelUpdateManyWithWhereWithoutHostInput = {
    where: WheelScalarWhereInput
    data: XOR<WheelUpdateManyMutationInput, WheelUncheckedUpdateManyWithoutHostInput>
  }

  export type UserCreateWithoutWheelsOwnedInput = {
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinCreateNestedManyWithoutUserInput
    spins?: SpinCreateNestedManyWithoutWinnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wheelsHosted?: WheelCreateNestedManyWithoutHostInput
  }

  export type UserUncheckedCreateWithoutWheelsOwnedInput = {
    id?: number
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutUserInput
    spins?: SpinUncheckedCreateNestedManyWithoutWinnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wheelsHosted?: WheelUncheckedCreateNestedManyWithoutHostInput
  }

  export type UserCreateOrConnectWithoutWheelsOwnedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWheelsOwnedInput, UserUncheckedCreateWithoutWheelsOwnedInput>
  }

  export type UserCreateWithoutWheelsHostedInput = {
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinCreateNestedManyWithoutUserInput
    spins?: SpinCreateNestedManyWithoutWinnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wheelsOwned?: WheelCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutWheelsHostedInput = {
    id?: number
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutUserInput
    spins?: SpinUncheckedCreateNestedManyWithoutWinnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wheelsOwned?: WheelUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutWheelsHostedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWheelsHostedInput, UserUncheckedCreateWithoutWheelsHostedInput>
  }

  export type JoinCreateWithoutWheelInput = {
    joinedAt?: Date | string
    eliminatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutJoinsInput
  }

  export type JoinUncheckedCreateWithoutWheelInput = {
    id?: number
    userId: number
    joinedAt?: Date | string
    eliminatedAt?: Date | string | null
  }

  export type JoinCreateOrConnectWithoutWheelInput = {
    where: JoinWhereUniqueInput
    create: XOR<JoinCreateWithoutWheelInput, JoinUncheckedCreateWithoutWheelInput>
  }

  export type JoinCreateManyWheelInputEnvelope = {
    data: JoinCreateManyWheelInput | JoinCreateManyWheelInput[]
    skipDuplicates?: boolean
  }

  export type SpinCreateWithoutWheelInput = {
    amount: number
    createdAt?: Date | string
    winner: UserCreateNestedOneWithoutSpinsInput
  }

  export type SpinUncheckedCreateWithoutWheelInput = {
    id?: number
    winnerId: number
    amount: number
    createdAt?: Date | string
  }

  export type SpinCreateOrConnectWithoutWheelInput = {
    where: SpinWhereUniqueInput
    create: XOR<SpinCreateWithoutWheelInput, SpinUncheckedCreateWithoutWheelInput>
  }

  export type SpinCreateManyWheelInputEnvelope = {
    data: SpinCreateManyWheelInput | SpinCreateManyWheelInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutWheelInput = {
    amount: number
    kind: string
    meta?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutWheelInput = {
    id?: number
    userId: number
    amount: number
    kind: string
    meta?: string | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutWheelInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutWheelInput, TransactionUncheckedCreateWithoutWheelInput>
  }

  export type TransactionCreateManyWheelInputEnvelope = {
    data: TransactionCreateManyWheelInput | TransactionCreateManyWheelInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWheelsOwnedInput = {
    update: XOR<UserUpdateWithoutWheelsOwnedInput, UserUncheckedUpdateWithoutWheelsOwnedInput>
    create: XOR<UserCreateWithoutWheelsOwnedInput, UserUncheckedCreateWithoutWheelsOwnedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWheelsOwnedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWheelsOwnedInput, UserUncheckedUpdateWithoutWheelsOwnedInput>
  }

  export type UserUpdateWithoutWheelsOwnedInput = {
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUpdateManyWithoutUserNestedInput
    spins?: SpinUpdateManyWithoutWinnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wheelsHosted?: WheelUpdateManyWithoutHostNestedInput
  }

  export type UserUncheckedUpdateWithoutWheelsOwnedInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutUserNestedInput
    spins?: SpinUncheckedUpdateManyWithoutWinnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wheelsHosted?: WheelUncheckedUpdateManyWithoutHostNestedInput
  }

  export type UserUpsertWithoutWheelsHostedInput = {
    update: XOR<UserUpdateWithoutWheelsHostedInput, UserUncheckedUpdateWithoutWheelsHostedInput>
    create: XOR<UserCreateWithoutWheelsHostedInput, UserUncheckedCreateWithoutWheelsHostedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWheelsHostedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWheelsHostedInput, UserUncheckedUpdateWithoutWheelsHostedInput>
  }

  export type UserUpdateWithoutWheelsHostedInput = {
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUpdateManyWithoutUserNestedInput
    spins?: SpinUpdateManyWithoutWinnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wheelsOwned?: WheelUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutWheelsHostedInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutUserNestedInput
    spins?: SpinUncheckedUpdateManyWithoutWinnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wheelsOwned?: WheelUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type JoinUpsertWithWhereUniqueWithoutWheelInput = {
    where: JoinWhereUniqueInput
    update: XOR<JoinUpdateWithoutWheelInput, JoinUncheckedUpdateWithoutWheelInput>
    create: XOR<JoinCreateWithoutWheelInput, JoinUncheckedCreateWithoutWheelInput>
  }

  export type JoinUpdateWithWhereUniqueWithoutWheelInput = {
    where: JoinWhereUniqueInput
    data: XOR<JoinUpdateWithoutWheelInput, JoinUncheckedUpdateWithoutWheelInput>
  }

  export type JoinUpdateManyWithWhereWithoutWheelInput = {
    where: JoinScalarWhereInput
    data: XOR<JoinUpdateManyMutationInput, JoinUncheckedUpdateManyWithoutWheelInput>
  }

  export type SpinUpsertWithWhereUniqueWithoutWheelInput = {
    where: SpinWhereUniqueInput
    update: XOR<SpinUpdateWithoutWheelInput, SpinUncheckedUpdateWithoutWheelInput>
    create: XOR<SpinCreateWithoutWheelInput, SpinUncheckedCreateWithoutWheelInput>
  }

  export type SpinUpdateWithWhereUniqueWithoutWheelInput = {
    where: SpinWhereUniqueInput
    data: XOR<SpinUpdateWithoutWheelInput, SpinUncheckedUpdateWithoutWheelInput>
  }

  export type SpinUpdateManyWithWhereWithoutWheelInput = {
    where: SpinScalarWhereInput
    data: XOR<SpinUpdateManyMutationInput, SpinUncheckedUpdateManyWithoutWheelInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutWheelInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutWheelInput, TransactionUncheckedUpdateWithoutWheelInput>
    create: XOR<TransactionCreateWithoutWheelInput, TransactionUncheckedCreateWithoutWheelInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutWheelInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutWheelInput, TransactionUncheckedUpdateWithoutWheelInput>
  }

  export type TransactionUpdateManyWithWhereWithoutWheelInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutWheelInput>
  }

  export type UserCreateWithoutJoinsInput = {
    username: string
    coins?: number
    createdAt?: Date | string
    spins?: SpinCreateNestedManyWithoutWinnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wheelsOwned?: WheelCreateNestedManyWithoutOwnerInput
    wheelsHosted?: WheelCreateNestedManyWithoutHostInput
  }

  export type UserUncheckedCreateWithoutJoinsInput = {
    id?: number
    username: string
    coins?: number
    createdAt?: Date | string
    spins?: SpinUncheckedCreateNestedManyWithoutWinnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wheelsOwned?: WheelUncheckedCreateNestedManyWithoutOwnerInput
    wheelsHosted?: WheelUncheckedCreateNestedManyWithoutHostInput
  }

  export type UserCreateOrConnectWithoutJoinsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJoinsInput, UserUncheckedCreateWithoutJoinsInput>
  }

  export type WheelCreateWithoutJoinsInput = {
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutWheelsOwnedInput
    host: UserCreateNestedOneWithoutWheelsHostedInput
    spins?: SpinCreateNestedManyWithoutWheelInput
    transactions?: TransactionCreateNestedManyWithoutWheelInput
  }

  export type WheelUncheckedCreateWithoutJoinsInput = {
    id?: number
    ownerId: number
    hostId: number
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    spins?: SpinUncheckedCreateNestedManyWithoutWheelInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutWheelInput
  }

  export type WheelCreateOrConnectWithoutJoinsInput = {
    where: WheelWhereUniqueInput
    create: XOR<WheelCreateWithoutJoinsInput, WheelUncheckedCreateWithoutJoinsInput>
  }

  export type UserUpsertWithoutJoinsInput = {
    update: XOR<UserUpdateWithoutJoinsInput, UserUncheckedUpdateWithoutJoinsInput>
    create: XOR<UserCreateWithoutJoinsInput, UserUncheckedCreateWithoutJoinsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJoinsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJoinsInput, UserUncheckedUpdateWithoutJoinsInput>
  }

  export type UserUpdateWithoutJoinsInput = {
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spins?: SpinUpdateManyWithoutWinnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wheelsOwned?: WheelUpdateManyWithoutOwnerNestedInput
    wheelsHosted?: WheelUpdateManyWithoutHostNestedInput
  }

  export type UserUncheckedUpdateWithoutJoinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spins?: SpinUncheckedUpdateManyWithoutWinnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wheelsOwned?: WheelUncheckedUpdateManyWithoutOwnerNestedInput
    wheelsHosted?: WheelUncheckedUpdateManyWithoutHostNestedInput
  }

  export type WheelUpsertWithoutJoinsInput = {
    update: XOR<WheelUpdateWithoutJoinsInput, WheelUncheckedUpdateWithoutJoinsInput>
    create: XOR<WheelCreateWithoutJoinsInput, WheelUncheckedCreateWithoutJoinsInput>
    where?: WheelWhereInput
  }

  export type WheelUpdateToOneWithWhereWithoutJoinsInput = {
    where?: WheelWhereInput
    data: XOR<WheelUpdateWithoutJoinsInput, WheelUncheckedUpdateWithoutJoinsInput>
  }

  export type WheelUpdateWithoutJoinsInput = {
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutWheelsOwnedNestedInput
    host?: UserUpdateOneRequiredWithoutWheelsHostedNestedInput
    spins?: SpinUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUpdateManyWithoutWheelNestedInput
  }

  export type WheelUncheckedUpdateWithoutJoinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spins?: SpinUncheckedUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutWheelNestedInput
  }

  export type WheelCreateWithoutSpinsInput = {
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutWheelsOwnedInput
    host: UserCreateNestedOneWithoutWheelsHostedInput
    joins?: JoinCreateNestedManyWithoutWheelInput
    transactions?: TransactionCreateNestedManyWithoutWheelInput
  }

  export type WheelUncheckedCreateWithoutSpinsInput = {
    id?: number
    ownerId: number
    hostId: number
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutWheelInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutWheelInput
  }

  export type WheelCreateOrConnectWithoutSpinsInput = {
    where: WheelWhereUniqueInput
    create: XOR<WheelCreateWithoutSpinsInput, WheelUncheckedCreateWithoutSpinsInput>
  }

  export type UserCreateWithoutSpinsInput = {
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wheelsOwned?: WheelCreateNestedManyWithoutOwnerInput
    wheelsHosted?: WheelCreateNestedManyWithoutHostInput
  }

  export type UserUncheckedCreateWithoutSpinsInput = {
    id?: number
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wheelsOwned?: WheelUncheckedCreateNestedManyWithoutOwnerInput
    wheelsHosted?: WheelUncheckedCreateNestedManyWithoutHostInput
  }

  export type UserCreateOrConnectWithoutSpinsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSpinsInput, UserUncheckedCreateWithoutSpinsInput>
  }

  export type WheelUpsertWithoutSpinsInput = {
    update: XOR<WheelUpdateWithoutSpinsInput, WheelUncheckedUpdateWithoutSpinsInput>
    create: XOR<WheelCreateWithoutSpinsInput, WheelUncheckedCreateWithoutSpinsInput>
    where?: WheelWhereInput
  }

  export type WheelUpdateToOneWithWhereWithoutSpinsInput = {
    where?: WheelWhereInput
    data: XOR<WheelUpdateWithoutSpinsInput, WheelUncheckedUpdateWithoutSpinsInput>
  }

  export type WheelUpdateWithoutSpinsInput = {
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutWheelsOwnedNestedInput
    host?: UserUpdateOneRequiredWithoutWheelsHostedNestedInput
    joins?: JoinUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUpdateManyWithoutWheelNestedInput
  }

  export type WheelUncheckedUpdateWithoutSpinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutWheelNestedInput
  }

  export type UserUpsertWithoutSpinsInput = {
    update: XOR<UserUpdateWithoutSpinsInput, UserUncheckedUpdateWithoutSpinsInput>
    create: XOR<UserCreateWithoutSpinsInput, UserUncheckedCreateWithoutSpinsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSpinsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSpinsInput, UserUncheckedUpdateWithoutSpinsInput>
  }

  export type UserUpdateWithoutSpinsInput = {
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wheelsOwned?: WheelUpdateManyWithoutOwnerNestedInput
    wheelsHosted?: WheelUpdateManyWithoutHostNestedInput
  }

  export type UserUncheckedUpdateWithoutSpinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wheelsOwned?: WheelUncheckedUpdateManyWithoutOwnerNestedInput
    wheelsHosted?: WheelUncheckedUpdateManyWithoutHostNestedInput
  }

  export type UserCreateWithoutTransactionsInput = {
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinCreateNestedManyWithoutUserInput
    spins?: SpinCreateNestedManyWithoutWinnerInput
    wheelsOwned?: WheelCreateNestedManyWithoutOwnerInput
    wheelsHosted?: WheelCreateNestedManyWithoutHostInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: number
    username: string
    coins?: number
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutUserInput
    spins?: SpinUncheckedCreateNestedManyWithoutWinnerInput
    wheelsOwned?: WheelUncheckedCreateNestedManyWithoutOwnerInput
    wheelsHosted?: WheelUncheckedCreateNestedManyWithoutHostInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type WheelCreateWithoutTransactionsInput = {
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutWheelsOwnedInput
    host: UserCreateNestedOneWithoutWheelsHostedInput
    joins?: JoinCreateNestedManyWithoutWheelInput
    spins?: SpinCreateNestedManyWithoutWheelInput
  }

  export type WheelUncheckedCreateWithoutTransactionsInput = {
    id?: number
    ownerId: number
    hostId: number
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
    joins?: JoinUncheckedCreateNestedManyWithoutWheelInput
    spins?: SpinUncheckedCreateNestedManyWithoutWheelInput
  }

  export type WheelCreateOrConnectWithoutTransactionsInput = {
    where: WheelWhereUniqueInput
    create: XOR<WheelCreateWithoutTransactionsInput, WheelUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUpdateManyWithoutUserNestedInput
    spins?: SpinUpdateManyWithoutWinnerNestedInput
    wheelsOwned?: WheelUpdateManyWithoutOwnerNestedInput
    wheelsHosted?: WheelUpdateManyWithoutHostNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    coins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutUserNestedInput
    spins?: SpinUncheckedUpdateManyWithoutWinnerNestedInput
    wheelsOwned?: WheelUncheckedUpdateManyWithoutOwnerNestedInput
    wheelsHosted?: WheelUncheckedUpdateManyWithoutHostNestedInput
  }

  export type WheelUpsertWithoutTransactionsInput = {
    update: XOR<WheelUpdateWithoutTransactionsInput, WheelUncheckedUpdateWithoutTransactionsInput>
    create: XOR<WheelCreateWithoutTransactionsInput, WheelUncheckedCreateWithoutTransactionsInput>
    where?: WheelWhereInput
  }

  export type WheelUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: WheelWhereInput
    data: XOR<WheelUpdateWithoutTransactionsInput, WheelUncheckedUpdateWithoutTransactionsInput>
  }

  export type WheelUpdateWithoutTransactionsInput = {
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutWheelsOwnedNestedInput
    host?: UserUpdateOneRequiredWithoutWheelsHostedNestedInput
    joins?: JoinUpdateManyWithoutWheelNestedInput
    spins?: SpinUpdateManyWithoutWheelNestedInput
  }

  export type WheelUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutWheelNestedInput
    spins?: SpinUncheckedUpdateManyWithoutWheelNestedInput
  }

  export type JoinCreateManyUserInput = {
    id?: number
    wheelId: number
    joinedAt?: Date | string
    eliminatedAt?: Date | string | null
  }

  export type SpinCreateManyWinnerInput = {
    id?: number
    wheelId: number
    amount: number
    createdAt?: Date | string
  }

  export type TransactionCreateManyUserInput = {
    id?: number
    wheelId: number
    amount: number
    kind: string
    meta?: string | null
    createdAt?: Date | string
  }

  export type WheelCreateManyOwnerInput = {
    id?: number
    hostId: number
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
  }

  export type WheelCreateManyHostInput = {
    id?: number
    ownerId: number
    entry_fee: number
    winnerPool?: number
    ownerPool?: number
    appPool?: number
    status?: $Enums.WheelStatus
    startsAt?: Date | string | null
    endsAt?: Date | string | null
    createdAt?: Date | string
  }

  export type JoinUpdateWithoutUserInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wheel?: WheelUpdateOneRequiredWithoutJoinsNestedInput
  }

  export type JoinUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JoinUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SpinUpdateWithoutWinnerInput = {
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wheel?: WheelUpdateOneRequiredWithoutSpinsNestedInput
  }

  export type SpinUncheckedUpdateWithoutWinnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpinUncheckedUpdateManyWithoutWinnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wheel?: WheelUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    wheelId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WheelUpdateWithoutOwnerInput = {
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    host?: UserUpdateOneRequiredWithoutWheelsHostedNestedInput
    joins?: JoinUpdateManyWithoutWheelNestedInput
    spins?: SpinUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUpdateManyWithoutWheelNestedInput
  }

  export type WheelUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutWheelNestedInput
    spins?: SpinUncheckedUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutWheelNestedInput
  }

  export type WheelUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WheelUpdateWithoutHostInput = {
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutWheelsOwnedNestedInput
    joins?: JoinUpdateManyWithoutWheelNestedInput
    spins?: SpinUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUpdateManyWithoutWheelNestedInput
  }

  export type WheelUncheckedUpdateWithoutHostInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    joins?: JoinUncheckedUpdateManyWithoutWheelNestedInput
    spins?: SpinUncheckedUpdateManyWithoutWheelNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutWheelNestedInput
  }

  export type WheelUncheckedUpdateManyWithoutHostInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    entry_fee?: IntFieldUpdateOperationsInput | number
    winnerPool?: IntFieldUpdateOperationsInput | number
    ownerPool?: IntFieldUpdateOperationsInput | number
    appPool?: IntFieldUpdateOperationsInput | number
    status?: EnumWheelStatusFieldUpdateOperationsInput | $Enums.WheelStatus
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JoinCreateManyWheelInput = {
    id?: number
    userId: number
    joinedAt?: Date | string
    eliminatedAt?: Date | string | null
  }

  export type SpinCreateManyWheelInput = {
    id?: number
    winnerId: number
    amount: number
    createdAt?: Date | string
  }

  export type TransactionCreateManyWheelInput = {
    id?: number
    userId: number
    amount: number
    kind: string
    meta?: string | null
    createdAt?: Date | string
  }

  export type JoinUpdateWithoutWheelInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutJoinsNestedInput
  }

  export type JoinUncheckedUpdateWithoutWheelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JoinUncheckedUpdateManyWithoutWheelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eliminatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SpinUpdateWithoutWheelInput = {
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: UserUpdateOneRequiredWithoutSpinsNestedInput
  }

  export type SpinUncheckedUpdateWithoutWheelInput = {
    id?: IntFieldUpdateOperationsInput | number
    winnerId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpinUncheckedUpdateManyWithoutWheelInput = {
    id?: IntFieldUpdateOperationsInput | number
    winnerId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutWheelInput = {
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutWheelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutWheelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}