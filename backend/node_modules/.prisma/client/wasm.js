
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  coins: 'coins',
  createdAt: 'createdAt'
};

exports.Prisma.WheelScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  hostId: 'hostId',
  entry_fee: 'entry_fee',
  winnerPool: 'winnerPool',
  ownerPool: 'ownerPool',
  appPool: 'appPool',
  status: 'status',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  createdAt: 'createdAt'
};

exports.Prisma.JoinScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  wheelId: 'wheelId',
  joinedAt: 'joinedAt',
  eliminatedAt: 'eliminatedAt'
};

exports.Prisma.SpinScalarFieldEnum = {
  id: 'id',
  wheelId: 'wheelId',
  winnerId: 'winnerId',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  wheelId: 'wheelId',
  amount: 'amount',
  kind: 'kind',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.WheelStatus = exports.$Enums.WheelStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  FINISHED: 'FINISHED',
  ABORTED: 'ABORTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Wheel: 'Wheel',
  Join: 'Join',
  Spin: 'Spin',
  Transaction: 'Transaction'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/ubuntu/spinwheel-game/backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/ubuntu/spinwheel-game/backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// -------------------------\n// User model\n// -------------------------\nmodel User {\n  id        Int      @id @default(autoincrement())\n  username  String   @unique\n  coins     Int      @default(1000)\n  createdAt DateTime @default(now())\n\n  joins        Join[]\n  spins        Spin[]\n  transactions Transaction[]\n  wheelsOwned  Wheel[]       @relation(\"WheelOwner\")\n  wheelsHosted Wheel[]       @relation(\"WheelHost\")\n}\n\n// -------------------------\n// Wheel model\n// -------------------------\nmodel Wheel {\n  id         Int         @id @default(autoincrement())\n  ownerId    Int\n  owner      User        @relation(\"WheelOwner\", fields: [ownerId], references: [id])\n  hostId     Int\n  host       User        @relation(\"WheelHost\", fields: [hostId], references: [id])\n  entry_fee  Int\n  winnerPool Int         @default(0)\n  ownerPool  Int         @default(0)\n  appPool    Int         @default(0)\n  status     WheelStatus @default(PENDING)\n  startsAt   DateTime?\n  endsAt     DateTime?\n  createdAt  DateTime    @default(now())\n\n  joins        Join[]\n  spins        Spin[]\n  transactions Transaction[]\n}\n\n// -------------------------\n// Join model\n// -------------------------\nmodel Join {\n  id           Int       @id @default(autoincrement())\n  userId       Int\n  user         User      @relation(fields: [userId], references: [id])\n  wheelId      Int\n  wheel        Wheel     @relation(fields: [wheelId], references: [id])\n  joinedAt     DateTime  @default(now())\n  eliminatedAt DateTime?\n}\n\n// -------------------------\n// Spin model\n// -------------------------\nmodel Spin {\n  id        Int      @id @default(autoincrement())\n  wheelId   Int\n  wheel     Wheel    @relation(fields: [wheelId], references: [id])\n  winnerId  Int\n  winner    User     @relation(fields: [winnerId], references: [id])\n  amount    Int\n  createdAt DateTime @default(now())\n}\n\n// -------------------------\n// Transaction model\n// -------------------------\nmodel Transaction {\n  id        Int      @id @default(autoincrement())\n  userId    Int\n  user      User     @relation(fields: [userId], references: [id])\n  wheelId   Int\n  wheel     Wheel    @relation(fields: [wheelId], references: [id])\n  amount    Int\n  kind      String\n  meta      String?\n  createdAt DateTime @default(now())\n}\n\n// -------------------------\n// Wheel Status Enum\n// -------------------------\nenum WheelStatus {\n  PENDING\n  RUNNING\n  FINISHED\n  ABORTED\n}\n",
  "inlineSchemaHash": "99b94499f4210878bdd019dbc665c317cbeb5bfeafc7d0a251dc34a34be1b066",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"joins\",\"kind\":\"object\",\"type\":\"Join\",\"relationName\":\"JoinToUser\"},{\"name\":\"spins\",\"kind\":\"object\",\"type\":\"Spin\",\"relationName\":\"SpinToUser\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToUser\"},{\"name\":\"wheelsOwned\",\"kind\":\"object\",\"type\":\"Wheel\",\"relationName\":\"WheelOwner\"},{\"name\":\"wheelsHosted\",\"kind\":\"object\",\"type\":\"Wheel\",\"relationName\":\"WheelHost\"}],\"dbName\":null},\"Wheel\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"WheelOwner\"},{\"name\":\"hostId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"host\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"WheelHost\"},{\"name\":\"entry_fee\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"winnerPool\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ownerPool\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"appPool\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"WheelStatus\"},{\"name\":\"startsAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endsAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"joins\",\"kind\":\"object\",\"type\":\"Join\",\"relationName\":\"JoinToWheel\"},{\"name\":\"spins\",\"kind\":\"object\",\"type\":\"Spin\",\"relationName\":\"SpinToWheel\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToWheel\"}],\"dbName\":null},\"Join\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"JoinToUser\"},{\"name\":\"wheelId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wheel\",\"kind\":\"object\",\"type\":\"Wheel\",\"relationName\":\"JoinToWheel\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"eliminatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Spin\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wheelId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wheel\",\"kind\":\"object\",\"type\":\"Wheel\",\"relationName\":\"SpinToWheel\"},{\"name\":\"winnerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"winner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SpinToUser\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TransactionToUser\"},{\"name\":\"wheelId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wheel\",\"kind\":\"object\",\"type\":\"Wheel\",\"relationName\":\"TransactionToWheel\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"kind\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

